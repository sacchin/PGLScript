<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spring</title>
  <link rel="alternate" href="https://spring.io/blog" />
  <link rel="self" href="https://spring.io/blog.atom" />
  <id>http://spring.io/blog.atom</id>
  <icon>https://spring.io/favicon.ico</icon>
  <updated>2014-10-25T21:54:00Z</updated>
  <entry>
    <title>Webinar Replay: Architecting for Continuous Delivery: Microservices with Pivotal CF and Spring Cloud</title>
    <link rel="alternate" href="https://spring.io/blog/2014/10/25/webinar-replay-architecting-for-continuous-delivery-microservices-with-pivotal-cf-and-spring-cloud" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2014-10-26:1796</id>
    <updated>2014-10-25T21:54:00Z</updated>
    <content type="html">&lt;p&gt;Speaker: Matt Stine, Pivotal&lt;/p&gt;

&lt;p&gt; Join Matt Stine to hear how you can architect systems that are optimized for continuous delivery, allowing you to innovate and deliver value faster and safer. Microservices, Pivotal CF, and Spring Cloud combine to create an operationalized architecture that enables enterprises to continuously deliver value at scale through rapid, iterative development, and to meet the needs of a mobile-first world.&lt;/p&gt;

&lt;p&gt;Learn more about Spring Cloud: &lt;a href="http://projects.spring.io/spring-cloud"&gt;http://projects.spring.io/spring-cloud&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn more about Cloud Foundry: &lt;a href="http://cloudfoundry.org"&gt;http://cloudfoundry.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn more about Pivotal CF: &lt;a href="http://www.pivotal.io/platform-as-a-service/pivotal-cf"&gt;http://www.pivotal.io/platform-as-a-service/pivotal-cf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;iframe width="420" height="315" src="//www.youtube.com/embed/vm8PcbcsYxU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>Spring AMQP 1.4 RC1 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2014/10/23/spring-amqp-1-4-rc1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Artem Bilan</name>
    </author>
    <id>tag:spring.io,2014-10-23:1794</id>
    <updated>2014-10-23T18:37:03Z</updated>
    <content type="html">&lt;p&gt;We are pleased to announce the availability of the Release Candidate for Spring AMQP 1.4; the GA is planned to be released during the first week of November.&lt;/p&gt;

&lt;p&gt;First of all, thank you all who provided feedback for the &lt;a href="https://spring.io/blog/2014/09/05/spring-amqp-for-java-1-4-milestone-1-available"&gt;milestone 1.4 M1 version&lt;/a&gt; and submitted reports (bugs or new features).
Special thanks to &lt;a href="https://spring.io/team/snicoll/"&gt;St√©phane Nicoll&lt;/a&gt;, who had introduced annotation-based message
listeners (&lt;code&gt;@RabbitListener&lt;/code&gt;) and the new &lt;code&gt;RabbitMessagingTemplate&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
&lt;a name="user-content-features-and-fixes-included-in-this-release-changes-since-the-milestone" class="anchor" href="#features-and-fixes-included-in-this-release-changes-since-the-milestone" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Features and fixes included in this release (changes since the milestone)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;With the annotation-based message listener you can use the &lt;code&gt;@SendTo&lt;/code&gt; annotation to send the result of the method as a reply message (when there's no &lt;code&gt;replyTo&lt;/code&gt; in the inbound message):&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@RabbitListener&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"capitalize"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@SendTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"capitalize.reply"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;capitalize&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toUpperCase&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(Annotation-basd listeners require Spring Framework 4.1.x).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A new &lt;code&gt;RabbitMessagingTemplate&lt;/code&gt; has been introduced, allowing the use of the &lt;code&gt;spring-messaging&lt;/code&gt; &lt;code&gt;Message&amp;lt;?&amp;gt;&lt;/code&gt; abstraction as an alternative to the Spring AMQP &lt;code&gt;Message&lt;/code&gt; (Spring Messaging &lt;code&gt;Message&amp;lt;?&amp;gt;&lt;/code&gt; is also supported by the annotated listeners). &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Logback &lt;code&gt;AmqpAppender&lt;/code&gt; is now available, with configuration similar to the existing Log4j &lt;code&gt;AmqpAppender&lt;/code&gt;:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight highlight-xml"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;appender&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"AMQP"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"org.springframework.amqp.rabbit.logback.AmqpAppender"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;layout&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;pattern&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;![CDATA[ %d %p %t [%c] - &amp;lt;%m&amp;gt;%n ]]&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/pattern&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/layout&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;abbreviation&amp;gt;&lt;/span&gt;36&lt;span class="nt"&gt;&amp;lt;/abbreviation&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;applicationId&amp;gt;&lt;/span&gt;MyApplication&lt;span class="nt"&gt;&amp;lt;/applicationId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;routingKeyPattern&amp;gt;&lt;/span&gt;%property{applicationId}.%c.%p&lt;span class="nt"&gt;&amp;lt;/routingKeyPattern&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;generateId&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/generateId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;charset&amp;gt;&lt;/span&gt;UTF-8&lt;span class="nt"&gt;&amp;lt;/charset&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;durable&amp;gt;&lt;/span&gt;false&lt;span class="nt"&gt;&amp;lt;/durable&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;deliveryMode&amp;gt;&lt;/span&gt;NON_PERSISTENT&lt;span class="nt"&gt;&amp;lt;/deliveryMode&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/appender&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;RabbitTemplate&lt;/code&gt; can now be configured with an &lt;code&gt;AbstractRoutingConnectionFactory&lt;/code&gt; with &lt;code&gt;expression&lt;/code&gt; attributes to determine the target &lt;code&gt;ConnectionFactory&lt;/code&gt; depending on the &lt;code&gt;RabbitTemplate&lt;/code&gt; operation:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight highlight-xml"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;rabbit:template&lt;/span&gt; &lt;span class="na"&gt;connection-factory=&lt;/span&gt;&lt;span class="s"&gt;"RoutingConnectionFactory"&lt;/span&gt;
     &lt;span class="na"&gt;send-connection-factory-selector-expression=&lt;/span&gt;&lt;span class="s"&gt;"messageProperties.userId"&lt;/span&gt;
     &lt;span class="na"&gt;receive-connection-factory-selector-expression=&lt;/span&gt;&lt;span class="s"&gt;"#root == 'fooQueue' ? 'foo' : null"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;In addition, the &lt;code&gt;mandatory-expression&lt;/code&gt; attribute has been added to the &lt;code&gt;RabbitTemplate&lt;/code&gt; to set the &lt;code&gt;mandatory&lt;/code&gt; flag for each sent message:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight highlight-xml"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;rabbit:template&lt;/span&gt; &lt;span class="na"&gt;connection-factory=&lt;/span&gt;&lt;span class="s"&gt;"connectionFactory"&lt;/span&gt;
      &lt;span class="na"&gt;mandatory-expression=&lt;/span&gt;&lt;span class="s"&gt;"messageProperties.contentType == 'application/json'"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(Previously, &lt;code&gt;mandatory&lt;/code&gt; was set at the template level).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;AbstractRoutingConnectionFactory&lt;/code&gt; is now also supported for the &lt;code&gt;MessageListenerContainer&lt;/code&gt;, where the &lt;code&gt;key&lt;/code&gt; for
the target &lt;code&gt;ConnectionFactory&lt;/code&gt; is based on the configured &lt;code&gt;queueNames&lt;/code&gt; array&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See the &lt;a href="https://jira.spring.io/secure/ReleaseNote.jspa?version=14724&amp;amp;projectId=10450"&gt;Release Notes&lt;/a&gt;
and the &lt;a href="http://projects.spring.io/spring-amqp/"&gt;Project Page&lt;/a&gt; for more information.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>See how to build, test, secure, and add hypermedia with this new tutorial, "Building REST Services with Spring"</title>
    <link rel="alternate" href="https://spring.io/blog/2014/10/23/see-how-to-build-test-secure-and-add-hypermedia-with-this-new-tutorial-building-rest-services-with-spring" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Greg Turnquist</name>
    </author>
    <id>tag:spring.io,2014-10-23:1795</id>
    <updated>2014-10-23T17:10:33Z</updated>
    <content type="html">&lt;p&gt;Greetings Spring Community!&lt;/p&gt;

&lt;p&gt;Today we have released a new tutorial written by Spring geek &lt;a href="http://spring.io/team/jlong"&gt;Josh Long&lt;/a&gt;, the man who travels the globe talking about Spring: &lt;a href="http://spring.io/guides/tutorials/bookmarks"&gt;Building REST Services with Spring&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this sleek tutorial, you can read about the simplicity and power of building RESTful web services using Spring. You'll also see how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Test them with Spring's powerful MockMvc&lt;/li&gt;
&lt;li&gt;Secure them with &lt;a href="http://projects.spring.io/spring-security"&gt;Spring Security&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Plugin error handling&lt;/li&gt;
&lt;li&gt;Add &lt;a href="http://projects.spring.io/spring-hateoas"&gt;hypermedia controls&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Dabble with &lt;a href="http://projects.spring.io/spring-security-oauth"&gt;OAuth&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;See it all using &lt;a href="http://projects.spring.io/spring-boot"&gt;Spring Boot&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It's a really good read with LOTS of code (you know, the important stuff). What about the existing REST tutorial? It was a bit dated on concepts we wanted to cover and state-of-the-art, so it has been retired in favor of this one.&lt;/p&gt;

&lt;p&gt;Share and enjoy!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Introducing Spring Sync</title>
    <link rel="alternate" href="https://spring.io/blog/2014/10/22/introducing-spring-sync" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Craig Walls</name>
    </author>
    <id>tag:spring.io,2014-10-21:1791</id>
    <updated>2014-10-22T17:05:09Z</updated>
    <content type="html">&lt;p&gt;Earlier today, I announced the first milestone release of Spring Sync, a new project that addresses efficient communication between client applications and Spring backends by employing patch-based exchanges. As this is a new project, I thought it would be a good time to show you what Spring Sync can do.&lt;/p&gt;

&lt;p&gt;The examples given here refer to the &lt;a href="https://github.com/spring-projects/spring-sync-samples/tree/master/spring-rest-todos"&gt;Spring REST Todos&lt;/a&gt; example and/or the &lt;code&gt;Todo&lt;/code&gt; class in that example project.&lt;/p&gt;

&lt;h2&gt;
&lt;a name="user-content-creating-and-applying-patches" class="anchor" href="#creating-and-applying-patches" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Creating and applying patches&lt;/h2&gt;

&lt;p&gt;At its lowest level, Spring Sync provides a library for producing and applying patches to Java objects. The &lt;code&gt;Patch&lt;/code&gt; class is the centerpiece of this library, capturing the changes that can be applied to an object to bring it in sync with another object. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Patch&lt;/code&gt; class aims to be generic, not associated directly with any particular representation of a patch. That said, it is inspired by &lt;a href="https://tools.ietf.org/html/rfc6902"&gt;JSON Patch&lt;/a&gt; and Spring Sync provides support for creating and serializing &lt;code&gt;Patch&lt;/code&gt; instances as JSON Patch. Future versions of Spring Sync may include support for other patch representations.&lt;/p&gt;

&lt;p&gt;The easiest way to create a patch is to perform a difference between two Java objects:&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="n"&gt;Todo&lt;/span&gt; &lt;span class="n"&gt;original&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...;&lt;/span&gt;
&lt;span class="n"&gt;Todo&lt;/span&gt; &lt;span class="n"&gt;modified&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...;&lt;/span&gt;
&lt;span class="n"&gt;Patch&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Diff&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;diff&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;original&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;modified&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, the &lt;code&gt;Diff.diff()&lt;/code&gt; method will compare the two &lt;code&gt;Todo&lt;/code&gt; objects and produce a &lt;code&gt;Patch&lt;/code&gt; that describes the difference between them.&lt;/p&gt;

&lt;p&gt;Once you have a &lt;code&gt;Patch&lt;/code&gt;, it can be applied to an object by passing in the object to the &lt;code&gt;apply()&lt;/code&gt; method:&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="n"&gt;Todo&lt;/span&gt; &lt;span class="n"&gt;patched&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;original&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Todo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that the &lt;code&gt;diff()&lt;/code&gt; and &lt;code&gt;apply()&lt;/code&gt; methods are the inverse of each other. Therefore, the patched &lt;code&gt;Todo&lt;/code&gt; in these examples should be identical to the modified &lt;code&gt;Todo&lt;/code&gt; after applying the patch to the original.&lt;/p&gt;

&lt;p&gt;As I mentioned, &lt;code&gt;Patch&lt;/code&gt; is decoupled from any particular patch representation. But Spring Sync offers &lt;code&gt;JsonPatchMaker&lt;/code&gt; as a utility class to convert &lt;code&gt;Patch&lt;/code&gt; objects to/from Jackson &lt;code&gt;JsonNode&lt;/code&gt; instances where the &lt;code&gt;JsonNode&lt;/code&gt; is an &lt;code&gt;ArrayNode&lt;/code&gt; containing zero or more operations per the JSON Patch specification. For example, to convert a &lt;code&gt;Patch&lt;/code&gt; to a &lt;code&gt;JsonNode&lt;/code&gt; containing JSON Patch:&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="n"&gt;JsonNode&lt;/span&gt; &lt;span class="n"&gt;jsonPatchNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JsonPatchMaker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toJsonNode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Similarly, a &lt;code&gt;Patch&lt;/code&gt; object can be created from a &lt;code&gt;JsonNode&lt;/code&gt; like this:&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="n"&gt;Patch&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JsonPatchMaker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromJsonNode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonPatchNode&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that &lt;code&gt;JsonPatchMaker&lt;/code&gt; is a temporary solution to (de)serializing &lt;code&gt;Patch&lt;/code&gt; objects to/from JSON Patch. It will be replaced with a more permanent solution in a later release.&lt;/p&gt;

&lt;h2&gt;
&lt;a name="user-content-applying-differential-synchronization" class="anchor" href="#applying-differential-synchronization" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Applying Differential Synchronization&lt;/h2&gt;

&lt;p&gt;Creating patches requires that you have both before and after instances of an object from which to calculate the difference. Although it doesn't refer to them as "before" and "after", the &lt;a href="https://neil.fraser.name/writing/sync/eng047-fraser.pdf"&gt;Differential Synchronization&lt;/a&gt; algorithm described in a paper by Neil Fraser essentially defines a controller manner by which patches can be created, shared, and applied between two or more network nodes (perhaps client and server, but not necessarily applicable only to client-server scenarios).&lt;/p&gt;

&lt;p&gt;When applying Differential Synchronization, each node maintains two copies of a resource: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The local node's own working copy that it may change.&lt;/li&gt;
&lt;li&gt;A shadow copy which is the local node's understanding of what a remote node's working copy looks like.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The node may make any changes it needs to it's local copy of the resource. Periodically, the node will produce a patch by comparing the local node with the shadow copy it maintains for the remote node. It then sends the patch to the remote node. Once the patch is sent, the node copies its local copy over the shadow, assuming that the remote node will apply the patch and therefore its understanding of the remote node's resource is in sync with the local resource.&lt;/p&gt;

&lt;p&gt;Upon receiving a patch, a node must apply the patch to the shadow that it keeps for the node that sent the patch and to its own local copy (which may have had changes itself).&lt;/p&gt;

&lt;p&gt;Spring Sync supports Differential Synchronization through its &lt;code&gt;DiffSync&lt;/code&gt; class. To create a &lt;code&gt;DiffSync&lt;/code&gt;, you must supply it with a &lt;code&gt;ShadowStore&lt;/code&gt; and the object type that it can apply patches for:&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="n"&gt;ShadowStore&lt;/span&gt; &lt;span class="n"&gt;shadowStore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;MapBasedShadowStore&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;shadowStore&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setRemoteNodeId&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"remoteNode"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;DiffSync&lt;/span&gt; &lt;span class="n"&gt;diffSync&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;DiffSync&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shadowStore&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Todo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once you have a &lt;code&gt;DiffSync&lt;/code&gt; in hand, you can use it to apply a &lt;code&gt;Patch&lt;/code&gt; to an object:&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="n"&gt;Todo&lt;/span&gt; &lt;span class="n"&gt;patched&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;diffSync&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;todo&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;apply()&lt;/code&gt; method will apply the patch to both the given object as well as the shadow copy of that same object. If no shadow copy has yet been created, it will create one by deep-cloning the given object.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;ShadowStore&lt;/code&gt; is where &lt;code&gt;DiffSync&lt;/code&gt; maintains its copy of shadow copies for a remote node. For any given node, there may be multiple shadow stores, one for each remote node it deals with. As you can see in the example, its &lt;code&gt;remoteNodeId&lt;/code&gt; property is set to uniquely identify the remote node. In a client-server topology, the server may use the session ID to identify the remote node. Meanwhile, the clients (which are probably only sharing the resource with one central server) may use any identifier they want to identify the server node.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;DiffSync&lt;/code&gt; can also be used to create a &lt;code&gt;Patch&lt;/code&gt; from a stored shadow copy:&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="n"&gt;Patch&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;diffSync&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;diff&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;todo&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When creating a patch, the stored shadow will be retrieved from the &lt;code&gt;ShadowStore&lt;/code&gt; and compared with the given object. In keeping with the Differential Synchronization flow, the given object will be copied over the shadow once the patch is produced.&lt;/p&gt;

&lt;p&gt;It's worth noting that &lt;code&gt;DiffSync&lt;/code&gt; works with &lt;code&gt;Patch&lt;/code&gt; objects which are decoupled from any particular patch representation. Therefore, &lt;code&gt;DiffSync&lt;/code&gt; itself is decoupled from the patch representation as well.&lt;/p&gt;

&lt;h2&gt;
&lt;a name="user-content-taking-diffsync-to-the-web" class="anchor" href="#taking-diffsync-to-the-web" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Taking DiffSync to the web&lt;/h2&gt;

&lt;p&gt;Creating and applying patches on a single node is somewhat pointless. Where Differential Synchronization really shines is when two or more nodes are sharing and manipulating the same resource and you need each node to remain in sync (as much as is reasonable). Therefore, Spring Sync also offers &lt;code&gt;DiffSyncController&lt;/code&gt; a Spring MVC controller that handles &lt;a href="http://tools.ietf.org/html/rfc5789"&gt;HTTP PATCH&lt;/a&gt; requests, applying Differential Synchronization to a resource.&lt;/p&gt;

&lt;p&gt;The easiest way to configure &lt;code&gt;DiffSyncController&lt;/code&gt; is to create a Spring configuration class that is annotated with &lt;code&gt;@EnableDifferentialSynchronization&lt;/code&gt; and extend the &lt;code&gt;DiffSyncConfigurerAdapter&lt;/code&gt; class:&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@Configuration&lt;/span&gt;
&lt;span class="nd"&gt;@EnableDifferentialSynchronization&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DiffSyncConfig&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;DiffSyncConfigurerAdapter&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@Autowired&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;PagingAndSortingRepository&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Todo&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;addPersistenceCallbacks&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PersistenceCallbackRegistry&lt;/span&gt; &lt;span class="n"&gt;registry&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;registry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addPersistenceCallback&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;JpaPersistenceCallback&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Todo&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Todo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Among other things, &lt;code&gt;@EnableDifferentialSynchronization&lt;/code&gt; declares a &lt;code&gt;DiffSyncController&lt;/code&gt; bean, providing it with a &lt;code&gt;PersistenceCallbackRegistry&lt;/code&gt; and a &lt;code&gt;ShadowStore&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;PersistenceCallbackRegistry&lt;/code&gt; is a registry of &lt;code&gt;PersistenceCallback&lt;/code&gt; objects through which &lt;code&gt;DiffSyncController&lt;/code&gt; will retrieve and persist resources it patches. The &lt;code&gt;PersistenceCallback&lt;/code&gt; interface enables &lt;code&gt;DiffSyncController&lt;/code&gt; to be decoupled from the application-specific persistence choices for the resource. As an example, here's an implementation of &lt;code&gt;PersistenceCallback&lt;/code&gt; that works with a &lt;a href="http://projects.spring.io/spring-data/"&gt;Spring Data&lt;/a&gt; &lt;code&gt;CrudRepository&lt;/code&gt; to persist &lt;code&gt;Todo&lt;/code&gt; objects:&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;springframework&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sync&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;diffsync&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;web&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.List&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.data.repository.CrudRepository&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.springframework.sync.diffsync.PersistenceCallback&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JpaPersistenceCallback&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;PersistenceCallback&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;CrudRepository&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;entityType&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;JpaPersistenceCallback&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CrudRepository&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;entityType&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;entityType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;entityType&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;findAll&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findAll&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="nf"&gt;findOne&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;findOne&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;valueOf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;persistChange&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;itemToSave&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;save&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itemToSave&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;persistChanges&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;itemsToSave&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;itemsToDelete&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;save&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itemsToSave&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;delete&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itemsToDelete&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getEntityType&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;entityType&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As for the &lt;code&gt;ShadowStore&lt;/code&gt; given to &lt;code&gt;DiffSyncController&lt;/code&gt;, it will be a &lt;code&gt;MapBasedShadowStore&lt;/code&gt; by default. But you can override the &lt;code&gt;getShadowStore()&lt;/code&gt; method from &lt;code&gt;DiffSyncConfigurerAdapter&lt;/code&gt; to specify a different shadow store implementation.  For example, you may configure a Redis-based shadow store like this:&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@Autowired&lt;/span&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;RedisOperations&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;redisTemplate&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ShadowStore&lt;/span&gt; &lt;span class="nf"&gt;getShadowStore&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;RedisShadowStore&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;redisTemplate&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Regardless of which implementation of &lt;code&gt;ShadowStore&lt;/code&gt; you choose, a session-scoped bean will be declared, ensuring that each client will receive their own instance of the shadow store.&lt;/p&gt;

&lt;p&gt;As it handles PATCH requests, &lt;code&gt;DiffSyncController&lt;/code&gt; will apply one cycle of the Differential Sychronization flow:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It will apply the patch to the server copy of the resource and to the shadow copy for the client who sent the PATCH.&lt;/li&gt;
&lt;li&gt;It will create a new patch by comparing its local resource with the shadow copy.&lt;/li&gt;
&lt;li&gt;It will replace the shadow copy with the local copy of the resource.&lt;/li&gt;
&lt;li&gt;It will send the new patch on the response to the client.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Just like &lt;code&gt;Patch&lt;/code&gt; and &lt;code&gt;DiffSync&lt;/code&gt;, &lt;code&gt;DiffSyncController&lt;/code&gt; is decoupled from any particular patch format. Spring Sync does provide &lt;code&gt;JsonPatchHttpMessageConverter&lt;/code&gt;, however, so that &lt;code&gt;DiffSyncController&lt;/code&gt; can receive and response with JSON Patch-formated patches, given "application/json-patch+json" as the content type. &lt;/p&gt;

&lt;h2&gt;
&lt;a name="user-content-conclusion" class="anchor" href="#conclusion" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;As you've seen here, Spring Sync aims to provide a means of efficient communication and synchronization between a client and a server (or any set of nodes that share a resource). It provides low-level support for producing and applying patches as well as higher-level support for working with Differential Synchronization. Although it comes with support for JSON Patch, it is largely independent of any specific patch format.&lt;/p&gt;

&lt;p&gt;This is just the beginning. Among other things, we're looking to...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Complement &lt;code&gt;DiffSyncController&lt;/code&gt;'s HTTP-based Differential Synchronization with WebSocket/STOMP for full-duplex patch communication.&lt;/li&gt;
&lt;li&gt;Continued refinement of the Differential Synchronization implementation to support resource versioning and other techniques to avoid patching conflicts.&lt;/li&gt;
&lt;li&gt;Support for using Spring Sync in client-side Android applications.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keep an eye on the project and let us know what you think. Feel free to &lt;a href="https://github.com/spring-projects/spring-sync/issues"&gt;submit bug reports and improvements&lt;/a&gt; and we certainly welcome you to &lt;a href="https://github.com/spring-projects/spring-sync"&gt;fork the code&lt;/a&gt; and submit pull requests.&lt;/p&gt;

&lt;p&gt;If you'd like to read more about Spring Sync, then have a look at these resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://www.slideshare.net/briancavalier/differential-sync-and-json-patch-s2-gx-2014"&gt;Differential Sychronization and JSON Patch&lt;/a&gt; : The presentation that Brian Cavalier and I gave at SpringOne/2GX in September.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://spring.io/blog/2014/10/08/streaming-json-patch-from-spring-to-a-react-ui"&gt;Streaming JSON Patch from Spring to a React UI&lt;/a&gt; : An article by Brian Cavalier that leverages Spring Sync on the server-side for producing patches.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/spring-projects/spring-sync-samples/tree/master/spring-rest-todos"&gt;Spring REST Todos&lt;/a&gt; : An Todos list example employing Spring Sync on the server with &lt;a href="https://github.com/cujojs/jiff"&gt;jiff.js&lt;/a&gt; and &lt;a href="https://github.com/briancavalier/fabulous"&gt;fabulous.js&lt;/a&gt; on the client.&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Spring Sync 1.0.0 Milestone 1 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2014/10/22/spring-sync-1-0-0-milestone-1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Craig Walls</name>
    </author>
    <id>tag:spring.io,2014-10-22:1792</id>
    <updated>2014-10-22T09:00:00Z</updated>
    <content type="html">&lt;p&gt;Dear Spring Community,&lt;/p&gt;

&lt;p&gt;I am pleased to announce the first milestone release of Spring Sync 1.0.0.&lt;/p&gt;

&lt;p&gt;Spring Sync enables efficient communication and synchronization of data between clients and Spring-based servers.&lt;/p&gt;

&lt;p&gt;The release dependency is available in the &lt;a href="http://repo.spring.io/libs-milestone-local"&gt;repo.spring.io milestone repository&lt;/a&gt; at the dependency coordinates of "org.springframework.sync:spring-sync:1.0.0.M1". &lt;/p&gt;

&lt;p&gt;This release includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A patch abstraction for calculating differences and applying patches between Java objects.&lt;/li&gt;
&lt;li&gt;Support for representing patches as &lt;a href="https://tools.ietf.org/html/rfc6902"&gt;JSON Patch&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;An implementation of &lt;a href="https://neil.fraser.name/writing/sync/eng047-fraser.pdf"&gt;Differential Synchronization&lt;/a&gt; for creating and applying patches in a controlled manner.&lt;/li&gt;
&lt;li&gt;DiffSyncController, a Spring MVC controller that handles HTTP request of type application/patch-json+patch and performing Differential Synchronization against a resource.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;a href="https://github.com/spring-projects/spring-sync"&gt;code for Spring Sync&lt;/a&gt; is available in GitHub. Contributions in the form of pull requests are most certainly welcome. You may also submit bug reports and improvement suggestions via &lt;a href="https://github.com/spring-projects/spring-sync/issues"&gt;GitHub issue tracking&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Keep an eye on this blog for an introductory article on Spring Sync to be published later today. In the meantime, have a look at a few &lt;a href="https://github.com/spring-projects/spring-sync-samples"&gt;Spring Sync examples&lt;/a&gt; to see Spring Sync in action.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - October 21st, 2014</title>
    <link rel="alternate" href="https://spring.io/blog/2014/10/22/this-week-in-spring-october-21st-2014" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2014-10-22:1793</id>
    <updated>2014-10-22T04:27:16Z</updated>
    <content type="html">&lt;p&gt; 
Welcome to another installment of 
&lt;em&gt;This Week in Spring&lt;/em&gt;! 
This week I'm talking to developers at the Neo4j &lt;b&gt; GraphConnect&lt;/b&gt; conference with my pal 
(and Neo4j evangelist) &lt;a href="http://twitter.com/kennybastani"&gt;Kenny Bastani&lt;/a&gt;, and then on
     Thursday I'll  be doing a webinar with my one of my pals on the Vaadin team, Peter Lehto, on how to build
      &lt;em&gt;Bootiful&lt;/em&gt; Vaadin applications - don't miss it! &lt;/p&gt;
 &lt;p&gt; Next week, I'll be doing a string of appearances at &lt;a href="http://www.meetup.com/Cloud-Foundry-Toronto/events/212074602/"&gt;Toronto&lt;/a&gt;, &lt;a href="http://www.meetup.com/nyc-cloud-foundry/events/200768002/"&gt;New York City&lt;/a&gt;, and &lt;a href="http://www.meetup.com/Boston-Area-Cloud-Foundry-Meetup/events/203305332/"&gt;Boston&lt;/a&gt; meetups helping people better build microservices with &lt;a href="http://spring.io/projects/spring-boot"&gt;Spring Boot&lt;/a&gt;, &lt;a href="http://spring.io/projects/spring-cloud"&gt;Spring Cloud&lt;/a&gt; and &lt;a href="http://cloudfoundry.org"&gt;Cloud Foundry&lt;/a&gt;. 
  Register now, come for the code, conversations, pizza and beer! Microservices are a big thing these days, and I'm sure there'll be a lot to talk about so don't miss these events!
&lt;/p&gt;

&lt;p&gt;
 As usual, we've got a lot to cover so  let's get to it! 
&lt;/p&gt;
 

&lt;ul&gt;
&lt;li&gt;
 Reactor project lead Jon Brisbin giddily announced the &lt;a href="https://spring.io/blog/2014/10/21/reactor-2-0-0-m1-released-with-reactive-streams-integration"&gt;first milestone for Reactor 2.0&lt;/a&gt; which has as its headline feature the Reactive Streams API. The Reactive Streams API is a collaborative effort between Netflix, Typesafe, Pivotal, RedHat, and others that makes easier the task of handling &lt;em&gt;backpressure&lt;/em&gt;  in a reactive pipeline. 
&lt;/li&gt;
&lt;li&gt;
 Spring Data ninja Christoph Strobl has put together a nice look at &lt;a href="https://spring.io/blog/2014/10/15/whats-new-in-spring-data-evans"&gt;what‚Äôs new in the latest and greatest Spring Data Evans release train&lt;/a&gt;. 
&lt;/li&gt;
&lt;li&gt;
 I hope you‚Äôll join me this Thursday as Vaadin‚Äôs Peter Lehto and I introduce &lt;a href="https://spring.io/blog/2014/10/01/webinar-building-bootful-uis-with-spring-boot-and-vaadin"&gt;how to build &lt;em&gt;Bootiful&lt;/em&gt; Vaadin rich UI applicatons&lt;/a&gt;. 
&lt;/li&gt;
&lt;li&gt;
 Then, mark your calendars for the good &lt;a href="http://twitter.com/david_syer"&gt;Dr. Syer&lt;/a&gt;'s webinar introducing  &lt;a href="https://spring.io/blog/2014/10/01/webinar-architecting-for-continuous-delivery-microservices-with-pivotal-cf-and-spring-cloud?utm_content=bufferebf5a&amp;amp;utm_medium=social&amp;amp;utm_source=twitter.com&amp;amp;utm_campaign=buffer"&gt;&lt;em&gt;Security for Microservices with Spring and OAuth2&lt;/em&gt;&lt;/a&gt; 
&lt;/li&gt;
&lt;li&gt;
 Spring‚Äôs the most productive Java technology, but who wouldn‚Äôt like to squeeze more productivity out of the Java language itself by eliminating restarts and instead simply &lt;em&gt;reloading&lt;/em&gt; changed byte code? JRebel can help! Adam Koblentz has put together two very cool posts looking at how  JRebel &lt;a href="http://zeroturnaround.com/blog/using-spring-mvc-with-jrebel-refactoring-xml-config-files"&gt;can reload Spring XML  configuration&lt;/a&gt; and how it  &lt;a href="http://zeroturnaround.com/blog/using-spring-mvc-with-jrebel-changing-requestmappings-without-restarting/"&gt;can reload Spring MVC &lt;code&gt;@Controller&lt;/code&gt; and &lt;code&gt;@RestController&lt;/code&gt;-based &lt;code&gt;@RequestMapping&lt;/code&gt; metadata&lt;/a&gt;. 
&lt;/li&gt;
&lt;li&gt;
 Speaking of Neo4j, they've just published some handy new guides (which they tell me were at least in part inspired by the &lt;a href="http://spring.io/guides"&gt;Spring guides&lt;/a&gt; - &lt;em&gt;blush&lt;/em&gt;!) that detail how to &lt;a href="http://neo4j.com/developer/java/#_using_spring_data_neo4j"&gt;get started with Spring Data Neo4j and Spring Boot&lt;/a&gt; 
&lt;/li&gt;
&lt;li&gt;
 Comsysto Gmbh has put together &lt;a href="http://java.dzone.com/articles/spring-boot-my-favorite"&gt;a &lt;em&gt;very&lt;/em&gt; nice look at Spring Boot&lt;/a&gt; and a Spring Boot applications lifecycle. He  describes as, "his favorite timesaving,  convention-enabling, autoconfig-creating, bean-making classpath-shaking microcontainer!" 
&lt;/li&gt;
&lt;li&gt;
 Readers of this roundup will know that &lt;a href="https://twitter.com/java_hipster/status/524439966495944705"&gt;we love JHipster, the Yeoman-based Spring Boot and Angular.js-code generator&lt;/a&gt;. JHipster   just celebrated its first birthday! Joyeux anniversairre, JHipster! 
&lt;/li&gt;
&lt;li&gt;
 Nieraj Singh put together a detailed look at  &lt;a href="http://blog.pivotal.io/cloud-foundry-pivotal/products/service-management-through-cloud-foundry-eclipse"&gt;how to manage Cloud Foundry services in Eclipse with our Cloud Foundry plugin&lt;/a&gt;. 
&lt;/li&gt;
&lt;li&gt;
 Phillip Verheyden (from Broadleaf Commerce, the makers of a Spring-based e-commerce engine) &lt;a href="http://www.broadleafcommerce.com/blog/spring-one-2gx-2014-postmortem"&gt;wrote  up his thoughts on  SpringOne2GX 2014&lt;/a&gt;. Thanks, Phillip! 
&lt;/li&gt;
&lt;li&gt;
 You &lt;strong&gt;are&lt;/strong&gt; following Groovy-language project lead &lt;a href="http://glaforge.appspot.com/article/groovy-weekly-41"&gt;Guillaume LaForge‚Äôs weekly roundup&lt;/a&gt; of all that‚Äôs awesome in the Groovy ecosystem, &lt;em&gt;aren‚Äôt you&lt;/em&gt;? 
&lt;/li&gt;
&lt;li&gt;
 Check out &lt;a href="http://thespringway.info/spring-web/map-to-list-of-objects-from-json-array-with-resttemplate/"&gt;this post  on &lt;em&gt;The Spring Way&lt;/em&gt; blog  if you‚Äôre trying to marshall arrays of complex types&lt;/a&gt; back and forth with Spring‚Äôs &lt;code&gt;RestTemplate&lt;/code&gt;. 
&lt;/li&gt;
&lt;li&gt;
 I always love reading Adrian Colyer‚Äôs blogs. Recently, he‚Äôs been reviewing one interesting academic paper per week. This last week he looked at a paper that offers that there‚Äôs &lt;a href="http://blog.acolyer.org/2014/10/21/coverage-is-not-strongly-correlated-with-test-suite-effectiveness/"&gt;not so strong a link between code-coverage and what that implies for (assurances about) code quality&lt;/a&gt;. 
&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Reactor 2.0.0.M1 released with Reactive Streams integration!</title>
    <link rel="alternate" href="https://spring.io/blog/2014/10/21/reactor-2-0-0-m1-released-with-reactive-streams-integration" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Jon Brisbin</name>
    </author>
    <id>tag:spring.io,2014-10-21:1790</id>
    <updated>2014-10-21T15:29:00Z</updated>
    <content type="html">&lt;p&gt;The &lt;a href="https://github.com/reactor/reactor"&gt;Reactor&lt;/a&gt; team is frankly a little giddy at finally being able to announce an initial milestone release of Reactor 2.0! This update includes a fully-compliant &lt;a href="http://www.reactive-streams.org/"&gt;Reactive Streams&lt;/a&gt; implementation in the completely re-written &lt;code&gt;Stream&lt;/code&gt; and &lt;code&gt;Promise&lt;/code&gt; APIs! This is a huge step for Reactor users. It opens up integration with other Reactive Streams implementations like &lt;a href="http://www.typesafe.com/activator/template/akka-stream-scala"&gt;Akka Streams&lt;/a&gt;, &lt;a href="http://ratpack.io/"&gt;Ratpack&lt;/a&gt;, &lt;a href="https://github.com/ReactiveX/RxJava"&gt;RxJava&lt;/a&gt; and others. Reactor provides a solid foundation upon which to build modern &lt;code&gt;#uberfastdata&lt;/code&gt; applications with demanding high-throughput and low-latency requirements.&lt;/p&gt;

&lt;h3&gt;
&lt;a name="user-content-stream-and-promise" class="anchor" href="#stream-and-promise" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Stream and Promise&lt;/h3&gt;

&lt;p&gt;The headline change in Reactor 2.0 is the Stream API. In fact, most other parts of the codebase were either just lightly refined or remain untouched between 1.1 and 2.0. Not so with &lt;code&gt;Stream&lt;/code&gt; and &lt;code&gt;Promise&lt;/code&gt;. These components have been completely rewritten from the ground up to take advantage of the Reactive Streams specification to provide fully-non-blocking backpressure in functional reactive streaming pipelines. &lt;/p&gt;

&lt;h3&gt;
&lt;a name="user-content-what-is-backpressure-in-a-reactive-system" class="anchor" href="#what-is-backpressure-in-a-reactive-system" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;What is backpressure in a reactive system?&lt;/h3&gt;

&lt;p&gt;Dr. Roland Kuhn, of Akka fame, has spoken on the topic quite eloquently and if you're interested in exploring the reasoning behind non-blocking backpressure, we encourage you to watch his conference presentations on the topic, &lt;a href="https://www.google.com/search?q=site%3Ayoutube.com%20%22reactive%20streams%22%20%22roland%20kuhn%22&amp;amp;rct=j"&gt;most of which are available on YouTube&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;TL;DR&lt;/p&gt;

&lt;p&gt;Backpressure is an inversion of the publisher and subscriber relationship where the &lt;code&gt;Subscriber&lt;/code&gt; says to the &lt;code&gt;Publisher&lt;/code&gt; "give me the next N available items" rather than a &lt;code&gt;Publisher&lt;/code&gt; saying to a &lt;code&gt;Subscriber&lt;/code&gt; "take all these items I have whether you can handle them or not". Since the &lt;code&gt;Publisher&lt;/code&gt; is passively providing elements of data to the &lt;code&gt;Subscriber&lt;/code&gt; rather than the other way around, it's not necessary (in a fully Reactive Streams pipeline) to buffer data since you'll never have more data inflight than what you can handle. In reality, some buffering or queueing is necessary but libraries like Reactor take away your need to worry about how this is accomplished so you can write fully reactive code that responds to data as it becomes available rather than trying to figure out what magic combination of &lt;code&gt;BlockingQueue&lt;/code&gt; or other kinds of inefficient schemes must be employed to ensure asynchronous components are properly segregated from one another.&lt;/p&gt;

&lt;h3&gt;
&lt;a name="user-content-reactor-implements-reactive-streams" class="anchor" href="#reactor-implements-reactive-streams" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Reactor implements Reactive Streams&lt;/h3&gt;

&lt;p&gt;The Reactor team has put in the depressingly large number of hours necessary to implement a comprehensive implementation of the Reactive Streams specification. Reactor's &lt;code&gt;Stream&lt;/code&gt; component provides you with useful and understandable hooks on which to hang your business logic so that you only have to concern yourself with writing the appropriately-scoped functional component that will respond to a single element of data rather than having to dirty your code with a lot of boilerplate logistics to handle passing data from one Thread to another, performing bounded queueing and buffering, and the sundry other tasks usually necessary in working with reactive, asynchronous components.&lt;/p&gt;

&lt;p&gt;An example of how this looks in your code can be found in the &lt;a href="https://github.com/SpringOne2GX-2014/reactive-geocoder"&gt;Reactive Geocoder Demo&lt;/a&gt; which the Reactor team discussed at this year's SpringOne in Dallas, Texas (&lt;a href="http://www.infoq.com/presentations/reactive-streams-reactor"&gt;replays&lt;/a&gt; are available on InfoQ for SpringOne2GX 2014 attendees and will become public some time later). &lt;/p&gt;

&lt;p&gt;Following is a little snippet that shows how to create a new &lt;code&gt;Stream&lt;/code&gt;, attach business logic to it, then publish data into it. &lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// by default Streams use the Disruptor RingBufferDispatcher&lt;/span&gt;
&lt;span class="n"&gt;HotStream&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;helloStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Streams&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;defer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;helloStream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"Hello "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"!"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
           &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;consume&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;log:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;helloStream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;broadcastNext&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"World"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When you run this, you will see the text "Hello World!" logged. You should also notice that the logging has taken place from the RingBuffer thread and not from your main thread. In other words, you've just submitted a task to another Thread to be executed asynchronously, have the result transformed into something else, and then responded to the result using Reactive Streams non-blocking, demand-based backpressure without any kind of noisy Future-based, blocking code!&lt;/p&gt;

&lt;p&gt;You can create "cold" streams as well, which are very similar to using RxJava's &lt;code&gt;Observable&lt;/code&gt;.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// stream contains the single value "Hello World!"&lt;/span&gt;
&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;helloStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Streams&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;just&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"World"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;helloStream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"Hello "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"!"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
           &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;consume&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;log:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When you run this, you will see the text "Hello World!" logged, similarly to the previous example. The difference here is that we never had to call the &lt;code&gt;broadcastNext(String)&lt;/code&gt; method because that was handled for us when we attached our &lt;code&gt;Consumer&amp;lt;String&amp;gt;&lt;/code&gt;. You can create streams out of any value or collection of values just like creating an RxJava &lt;code&gt;Observable&lt;/code&gt;. This lets you mix standard Java Collection APIs with the reactive, streaming API.&lt;/p&gt;

&lt;h3&gt;
&lt;a name="user-content-stream-is-the-new-black" class="anchor" href="#stream-is-the-new-black" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Stream is the new Black&lt;/h3&gt;

&lt;p&gt;Streaming APIs like Spark, Storm, and other Big Data libraries prove that working with data in a more functional and reactive way is more efficient when running on systems without unlimited resources (which is basically anything we run on in the cloud) as well as being more understandable (in many cases) owing to the declarative, self-documentating nature of the DSL used to build up the processing pipeline. When you boil your business logic down to its essence, you really do notice that not many things exist that can't be expressed as a transformation or consumer function. You either take input and produce output or you simply take input. Reactor's Stream API is steeped in this paradigm so provides you with a plethora (who can tell me this movie reference: "would you say I have a plethora of pinatas?") of options for processing data as it passes through your pipeline. Beyond simple functions like &lt;code&gt;map(Function&amp;lt;T,V&amp;gt;)&lt;/code&gt; and &lt;code&gt;filter(Predicate&amp;lt;T&amp;gt;)&lt;/code&gt; are the more sophisticated options like &lt;code&gt;buffer(int)&lt;/code&gt; or &lt;code&gt;buffer(int, long, TimeUnit)&lt;/code&gt;. The latter provides extrememly useful length and time-based "microbatching". For example, to microbatch a set of database updates that are expensive to send across a WAN connection, you might want to buffer them until you either have a set amount or a certain timeout has elapsed.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// create a stream backed by a load-balanced, round-robin assigned Dispatcher&lt;/span&gt;
&lt;span class="n"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Update&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;updateStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Streams&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;defer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getDefaultDispatcherFactory&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;

&lt;span class="n"&gt;updateStream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;350&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TimeUnit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;MILLISECONDS&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;consume&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;driver:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;batchUpdate&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will collect streaming updates until either 1024 of them have been collected or 350 milliseconds have expired, whichever comes first. It will then trigger the downstream processing by passing a &lt;code&gt;List&amp;lt;Update&amp;gt;&lt;/code&gt; of either 1024 elements or however many were collected in 350ms. This allows you to write very, very efficient systems that deal with high volumes of data in batches to minimize network bandwidth usage and maximize throughput (while still maintaing a predicatble latency).&lt;/p&gt;

&lt;p&gt;Along with microbatching &lt;code&gt;Stream&lt;/code&gt; provides facilities like &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;flatMap&lt;/code&gt;, &lt;code&gt;movingBuffer&lt;/code&gt;, &lt;code&gt;join&lt;/code&gt;, &lt;code&gt;merge&lt;/code&gt;, &lt;code&gt;sample&lt;/code&gt;, &lt;code&gt;sort&lt;/code&gt;, and many other operations which are largely self-explanatory. Much like Scala's collection API or RxJava's Observable, Reactor's &lt;code&gt;Stream&lt;/code&gt; provides functional and reactive ways to process data quickly, efficiently, and at extremely high volume while maintaining predictable, low latencies. It's not an exaggeration to say that you could write your entire application using the &lt;code&gt;Stream&lt;/code&gt; as a foundational component that is used to submit asynchronous tasks for execution and also to process traditional collections of data in a reactive way--and then mix the two approaches by combining live data with historical data.&lt;/p&gt;

&lt;h3&gt;
&lt;a name="user-content-parallel-processing" class="anchor" href="#parallel-processing" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Parallel processing&lt;/h3&gt;

&lt;p&gt;It's sometimes necessary to split up a stream of data into parallel pipelines for doing concurrent processing. Reactor's &lt;code&gt;Stream&lt;/code&gt; provides an extremely convenient way to do this with the &lt;code&gt;parallel(int)&lt;/code&gt; operation. You simply attach your business logic to the &lt;code&gt;Stream&lt;/code&gt; provided after the &lt;code&gt;parallel&lt;/code&gt; call and data will be round-robined between the downstream pipelines for concurrent processing.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="n"&gt;HotStream&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Streams&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;defer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// by default uses number of CPUs as thread count&lt;/span&gt;
&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parallel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;substream&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;substream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"Hello "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"!"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                                      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;consume&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;log:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here's an interesting example of the Reactive Streams implementation showing itself in your code: when you run this you won't get any output. The &lt;code&gt;.parallel()&lt;/code&gt; operation doesn't create "demand" on the pipeline. In a Reactive Streams system, it's the end of the pipeline that pulls data into the operations rather than the producer that pushes it. Since there's no terminal operation at the end of this pipeline, there's no way for the data to get pulled through. In reality that's not usually a problem because you actually want to handle the data in a real application. In this example, we can just add a &lt;code&gt;.drain()&lt;/code&gt; call after &lt;code&gt;.parallel()&lt;/code&gt; to produce demand and pull data through. We likely wouldn't do this in a production system but for tests and demos we can take the easy out with a drain.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parallel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;substream&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;substream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"Hello "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"!"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                                      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;consume&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;log:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;drain&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;
&lt;a name="user-content-whats-going-on-and-why-dont-i-see-what-i-expect" class="anchor" href="#whats-going-on-and-why-dont-i-see-what-i-expect" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;What's going on and why don't I see what I expect?&lt;/h3&gt;

&lt;p&gt;With reactive systems it's sometimes frustrating to understand why things aren't working like you expect. While there's not a lot that a library can do to make the process of live debugging an asynchronous stream inside an IDE better, there's always the tried-and-true method of copious logging. Reactor adds a couple of somewhat hidden methods called &lt;code&gt;.debug()&lt;/code&gt; and &lt;code&gt;.log()&lt;/code&gt; that should help you figure out how your streams are constructed and what they're doing. The &lt;code&gt;.debug()&lt;/code&gt; method will provide you with an output of how a stream is wired. It will show what actions are connected to what and what capacities are currently available in each. The &lt;code&gt;.log()&lt;/code&gt; method attaches a logging action to your stream and outputs subscribe and publish events.&lt;/p&gt;

&lt;p&gt;If we add a &lt;code&gt;.log()&lt;/code&gt; call before our &lt;code&gt;.parallel()&lt;/code&gt; from the above example, we'll get additional logging to tell us what's happening:&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parallel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;substream&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;substream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"Hello "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"!"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                                      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;consume&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;log:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;drain&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Will produce:&lt;/p&gt;

&lt;pre&gt;
[ringBuffer-1] INFO  r.r.a.LoggerAction - onSubscribe: {capacity=0/8188 [0%], current=0, pending=0, waiting=0}
[main] INFO  r.r.a.LoggerAction - subscribe: ConcurrentAction-{dispatcher=RingBuffer:8192, max-capacity=8188}
[ringBuffer-1] INFO  r.r.a.LoggerAction - request: 9223372036854775807
[ringBuffer-1] INFO  r.r.a.LoggerAction - onNext: World
[ringBufferGroup-2] INFO  r.r.StreamTests - Hello World!
&lt;/pre&gt;

&lt;h3&gt;
&lt;a name="user-content-artifacts" class="anchor" href="#artifacts" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Artifacts&lt;/h3&gt;

&lt;p&gt;To upgrade an existing application to Reactor 2.0, you'll likely only need to tweak a few things. If you are using streams in Reactor 1.1, you'll find that Reactor 2.0 streams differ in their publication of values. The &lt;code&gt;.broadcastNext()&lt;/code&gt; method is defined on &lt;code&gt;Action&lt;/code&gt; subclasses and &lt;code&gt;HotStream&lt;/code&gt; but not some other operations. Reactor 1.1 used a &lt;code&gt;Deferred&lt;/code&gt; to publish values so your code will need to be tweaked to change the publisher type to something that has access to the &lt;code&gt;.broadcastNext()&lt;/code&gt; method. If you're using a plain &lt;code&gt;Reactor&lt;/code&gt; or the Spring and annotation-based event handling, you won't have to change hardly anything.&lt;/p&gt;

&lt;p&gt;To access the milestone artifacts, use the &lt;code&gt;http://repo.spring.io/libs-milestone&lt;/code&gt; repository in your build system of choice. For example, if using Gradle (of course you're using Gradle, right?) just configure your &lt;code&gt;repositories&lt;/code&gt; block like so:&lt;/p&gt;

&lt;div class="highlight highlight-groovy"&gt;&lt;pre&gt;&lt;span class="n"&gt;repositories&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;maven&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="s1"&gt;'http://repo.spring.io/libs-milestone'&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;mavenCentral&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To report bugs, follow the development of Reactor 2.0, read the wiki, or otherwise get involved in the Reactor community, visit the GitHub home of Reactor at &lt;a href="https://github.com/reactor/reactor"&gt;https://github.com/reactor/reactor&lt;/a&gt;. You can also read the JavaDoc online here: &lt;a href="http://reactor.github.io/docs/api/2.0.0.M1/index.html"&gt;http://reactor.github.io/docs/api/2.0.0.M1/index.html&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Whats new in Spring Data Evans?</title>
    <link rel="alternate" href="https://spring.io/blog/2014/10/15/whats-new-in-spring-data-evans" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Christoph Strobl</name>
    </author>
    <id>tag:spring.io,2014-09-17:1764</id>
    <updated>2014-10-15T13:20:00Z</updated>
    <content type="html">&lt;p&gt;Spring Data Release &lt;a href="https://spring.io/blog/2014/09/09/spring-data-release-train-evans-goes-ga"&gt;Evans&lt;/a&gt; has been around for a while and it's more than time to finally introduce you to the latest and greatest features we shipped with it.&lt;/p&gt;

&lt;p&gt;There's a lot to cover since major enhancements have gone into the commons module. Those changes already have made it into some store modules and will go on and sneak their way into others over time, too. All of them are already available for at least &lt;a href="http://projects.spring.io/spring-data-jpa/"&gt;Spring Data JPA&lt;/a&gt;. That said, lets jump right in.&lt;/p&gt;

&lt;h2&gt;
&lt;a name="user-content-advanced-support-for-java-8" class="anchor" href="#advanced-support-for-java-8" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Advanced support for Java 8&lt;/h2&gt;

&lt;p&gt;Java8 has now been around for a while and previous Spring Data release trains already added fundamental support for some of those. With the Evans release train we extended the support significantly.&lt;/p&gt;

&lt;p&gt;Java 8's &lt;a href="http://docs.oracle.com/javase/8/docs/api/java/util/Optional.html"&gt;&lt;code&gt;Optional&lt;/code&gt;&lt;/a&gt; has been a supported return since the &lt;a href="https://spring.io/blog/2014/05/21/what-s-new-in-spring-data-dijkstra"&gt;Dijkstra release&lt;/a&gt; freeing you of having &lt;code&gt;null&lt;/code&gt; checks spread across your code. We simply wrap and unwrap values for you when used as return types with repositories.&lt;/p&gt;

&lt;p&gt;As of the Evans release &lt;a href="http://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html"&gt;default methods&lt;/a&gt; can be used in repository interfaces to e.g. forward parts of the parameters handed into the method to other query methods.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;PersonRepository&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Repository&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

  &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Customer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;findByLastname&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;lastname&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="n"&gt;Optional&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Customer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;findByLastname&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Customer&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;findByLastname&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customer&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getLastname&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;a name="user-content-enhanced-multi-store-support" class="anchor" href="#enhanced-multi-store-support" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Enhanced multi-store support&lt;/h2&gt;

&lt;p&gt;Configuring your application to make use of different Spring Data modules has not been without issues so far. E.g. you  might want to combine JPA and MongoDB where &lt;code&gt;Customer&lt;/code&gt; happens to be a JPA Entity while &lt;code&gt;Order&lt;/code&gt; is a MongoDB Document both persisted via according repository interfaces.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@Entity&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Customer&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

  &lt;span class="nd"&gt;@Id&lt;/span&gt; &lt;span class="nd"&gt;@GeneratedValue&lt;/span&gt; &lt;span class="n"&gt;Long&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;firstname&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lastname&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;@Document&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Order&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

  &lt;span class="nd"&gt;@Id&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;Long&lt;/span&gt; &lt;span class="n"&gt;customerId&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;Date&lt;/span&gt; &lt;span class="n"&gt;orderDate&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;CustomerRepository&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;CrudRepository&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Customer&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;

&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;OrderRepository&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;CrudRepository&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Order&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Until the Spring Data Evans release you had to manually configure the repository setup for MongoDB and JPA to mutually exclude the interfaces not relevant for the given store. Users usually used separate packages for that.&lt;/p&gt;

&lt;p&gt;Now the repository setup detects that multiple Spring Data modules are on the classpath,  and automatically restricts the repository scanning and inspect the domain type used by a given repository for store specific annotations such as &lt;code&gt;@Entity&lt;/code&gt; and &lt;code&gt;@Document&lt;/code&gt; to determine the concrete implementation they belong to. E.g. the Spring Data MongoDB module would drop the (accidentally) detected &lt;code&gt;CustomerRepository&lt;/code&gt; as we don't find an &lt;code&gt;@Document&lt;/code&gt; annotation.&lt;/p&gt;

&lt;h3&gt;
&lt;a name="user-content-statically-limiting-results" class="anchor" href="#statically-limiting-results" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Statically limiting results&lt;/h3&gt;

&lt;p&gt;Dynamically limiting results is no new concept since Spring Data has had &lt;code&gt;Pagable&lt;/code&gt; as abstraction since its inception and I bet nearly every Spring Data user is already familiar with something like this:&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;findByLastname&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;lastname&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Pageable&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This method declaration provides quite some flexibility: clients define the page number, size and a sort order of the elements they want to access. This is great if these values change dynamically (e.g. when you traverse the result set page by page).&lt;/p&gt;

&lt;p&gt;But what if you're always only interested in e.g. the first 10 results and you always want them to be ordered by lastname? This could've been achieved by statically defining a &lt;code&gt;PageRequest&lt;/code&gt; and reusing that for every method invocation. However, that still required the client to hand in the special &lt;code&gt;PageRequest&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;As of Spring Data Evans we now offer you a convenient way to explicitly limit the result set to a certain number of elements by using the keywords &lt;code&gt;top&lt;/code&gt; and &lt;code&gt;first&lt;/code&gt; followed by an optional positive numeric value (defaulting to 1).&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;findTop10ByLastnameOrderByFirstnameDesc&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;lastname&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;a name="user-content-mongodb-full-text-search" class="anchor" href="#mongodb-full-text-search" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;MongoDB Full Text Search&lt;/h2&gt;

&lt;p&gt;The Evans RC1 release introduced basic &lt;a href="https://spring.io/blog/2014/07/17/text-search-your-documents-with-spring-data-mongodb"&gt;text index support&lt;/a&gt; for MongoDB 2.6. Using &lt;code&gt;@TextIndexed&lt;/code&gt; allows you to mark properties you want to have text search enabled for so that we can go on and create the index for you. Note, that placing &lt;code&gt;@TextIndexed&lt;/code&gt; on properties referring to complex types will index all properties of that type. Since scoring is a fundamental part of full text search the &lt;code&gt;@TextScore&lt;/code&gt; annotation will assert that any full text query returns the documents score allowing you to order them by relevance.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@Document&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BlogPost&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

  &lt;span class="nd"&gt;@Id&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="nd"&gt;@TextIndexed&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="nd"&gt;@TextIndexed&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="nd"&gt;@TextIndexed&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;categories&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="nd"&gt;@TextScore&lt;/span&gt; &lt;span class="n"&gt;Float&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That in place, we extended the repository support to accept a &lt;code&gt;TextCriteria&lt;/code&gt; instance that will define detailed options about the text search that shall be executed: the terms to be searched for, language options etc.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;BlogPostRepository&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;CrudRepository&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;BlogPost&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;Page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;BlogPost&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;findBy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TextCriteria&lt;/span&gt; &lt;span class="n"&gt;criteria&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Pageable&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;BlogPost&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;findAllByOrderByScoreDesc&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TextCriteria&lt;/span&gt; &lt;span class="n"&gt;criteria&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first query method is quite straight forward. It executes the given &lt;code&gt;TextCriteria&lt;/code&gt; and pages the results. The second query method definition combines the given &lt;code&gt;TextCriteria&lt;/code&gt; with a standard criteria definition derived from the method name. This shows that you can freely combine text search with standard query easily.&lt;/p&gt;

&lt;h2&gt;
&lt;a name="user-content-mongodb-query-modifiers" class="anchor" href="#mongodb-query-modifiers" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;MongoDB query modifiers&lt;/h2&gt;

&lt;p&gt;We added &lt;code&gt;@Meta&lt;/code&gt; allowing you to define output and behavior of a query. By setting e.g. &lt;code&gt;maxExecutionTime&lt;/code&gt; one can define the maximum duration a query may take (in milliseconds). Any execution that exceeds the limit will result in an error. You can also advice MongoDB to only scan through a maximum number of documents and return what has been found until reaching the limit by setting &lt;code&gt;maxScanDocuments&lt;/code&gt;, while &lt;code&gt;comment&lt;/code&gt; allows you to define text you can search for within the &lt;code&gt;system.profile&lt;/code&gt; collection in case you got profiling enabled for your MongoDB instance. &lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@Meta&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maxExcecutionTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;comment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"onlyLimitedTime"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Customer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;findByFirstname&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;firstname&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;a name="user-content-configuration-options-for-redis-sentinel" class="anchor" href="#configuration-options-for-redis-sentinel" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Configuration options for Redis Sentinel&lt;/h2&gt;

&lt;p&gt;Redis 2.8 introduced high-availability support know as &lt;a href="http://redis.io/topics/sentinel"&gt;Sentinels&lt;/a&gt;. The Redis module of Spring Data Evans adds support to easily configure connecting to a sentinel setup so that your client will be able to continue working in case of re-elections of master nodes in a Redis cluster.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;RedisSentinelConfiguration&lt;/code&gt; defines where the Sentiels are located so that the &lt;code&gt;ConnectionFactory&lt;/code&gt; can set up pooling accordingly. In case of Jedis it will create a &lt;code&gt;JedisSentinelPool&lt;/code&gt; for automatic failover. This means that in case your master node goes down, you'll receive, as soon as the Sentinels agreed on a new master,  a connection to the new master without the need of any further interaction. &lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@Configuration&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RedisSentinelApplicationConfig&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

  &lt;span class="nd"&gt;@Bean&lt;/span&gt;
  &lt;span class="n"&gt;RedisConnectionFactory&lt;/span&gt; &lt;span class="nf"&gt;connectionFactory&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;JedisConnectionFactory&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sentinelConfig&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="nd"&gt;@Bean&lt;/span&gt;
  &lt;span class="n"&gt;RedisSentinelConfiguration&lt;/span&gt; &lt;span class="nf"&gt;sentinelConfig&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;RedisSentinelConfiguration&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;master&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"mymaster"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sentinel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"localhost"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;26379&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sentinel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"localhost"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;26380&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sentinel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"localhost"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;26381&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The upcoming Spring Boot 1.2, will even take this even further by automatically picking up the &lt;code&gt;RedisSentinelConfiguration&lt;/code&gt; if present and initialize the &lt;code&gt;RedisConnectionFactory&lt;/code&gt; accordingly.&lt;/p&gt;

&lt;h2&gt;
&lt;a name="user-content-schema-support-for-solr" class="anchor" href="#schema-support-for-solr" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Schema support for Solr&lt;/h2&gt;

&lt;p&gt;Although the &lt;a href="https://cwiki.apache.org/confluence/display/solr/Schema+API"&gt;Solr Schema API&lt;/a&gt; is not finished yet, we already try to support as much of it as possible. With the Evans release you can now dynamically add missing fields to an existing (managed) schema. To achieve this, we read the existing field definition and compare it against the one derived from the properties of the domain type. To do so we extended the &lt;code&gt;@Indexed&lt;/code&gt; annotation a bit. It now allows some fine tuning of the fields to be created as values such as &lt;code&gt;indexed&lt;/code&gt;, &lt;code&gt;stored&lt;/code&gt; and &lt;code&gt;solrType&lt;/code&gt; can be explicitly defined.&lt;/p&gt;

&lt;div class="highlight highlight-java"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@Configuration&lt;/span&gt;
&lt;span class="nd"&gt;@EnableSolrRepositories&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;schemaCreationSupport&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SolrConfiguration&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

  &lt;span class="nd"&gt;@Bean&lt;/span&gt;
  &lt;span class="n"&gt;SolrServer&lt;/span&gt; &lt;span class="nf"&gt;solrServer&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;HttpSolrServer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"http://localhost:8983/solr"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;@SolrDocument&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;solrCoreName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"collection1"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ManagedProduct&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

  &lt;span class="nd"&gt;@Id&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="nd"&gt;@Indexed&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"text_general"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="nd"&gt;@Indexed&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"cat"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As always we are eager to hear from you! Reach out to us on &lt;a href="https://twitter.com/SpringData"&gt;Twitter&lt;/a&gt;, &lt;a href="http://stackoverflow.com/tags/spring-data"&gt;Stackoverflow&lt;/a&gt; or &lt;a href="http://jira.spring.io"&gt;JIRA&lt;/a&gt; to request new features, suggest improvements or report a bug.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring  - Tuesday October 14th, 2014</title>
    <link rel="alternate" href="https://spring.io/blog/2014/10/14/this-week-in-spring-tuesday-october-14th-2014" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2014-10-14:1789</id>
    <updated>2014-10-14T18:05:00Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! This week I've been at Silicon Valley Code Camp, JAX London and Geekout UK talking to developers about how to build scalable, microservice-centric &lt;a href="http://start.spring.io"&gt;Spring Boot&lt;/a&gt; applications on &lt;a href="http://cloudfoundry.org/index.html"&gt;Cloud Foundry&lt;/a&gt;. It's been a lot fun talking to enthusiastic developers (on both sides of the Atlantic!).&lt;/p&gt;

&lt;p&gt;Without further ado, let's get on with the roundup!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spring Boot co-lead Phil Webb just announced the availability of &lt;a href="https://spring.io/blog/2014/10/11/spring-boot-1-2-0-m2-available-now"&gt;Spring Boot 1.2.0.M2&lt;/a&gt; which includes, among other things, auto-configuration for Jersey, log4j, &lt;code&gt;commons-dbcp&lt;/code&gt; support, a smarter &lt;em&gt;disk usage&lt;/em&gt; health indicator and improved RabbitMQ support&lt;/li&gt;
&lt;li&gt;Spring and Groovy Tool Suite lead Martin Lippert &lt;a href="https://spring.io/blog/2014/10/13/spring-tool-suite-and-groovy-grails-tool-suite-3-6-2-released"&gt;has just announced the latest and greatest release, 3.6.2&lt;/a&gt;, which is a maintenance release that includes an update to the latest Eclipse Luna SR1 installation. &lt;/li&gt;
&lt;li&gt;Also, Spring Boot co-lead &lt;a href="https://spring.io/blog/2014/10/11/spring-boot-1-1-8-released"&gt;Phil Webb just announced the 1.1.8 release of the 1.1x line of Spring Boot&lt;/a&gt; which includes a fix for the white-label error page cross-site scripting attack. &lt;/li&gt;
&lt;li&gt;Federated security is an important part of any distributed, multi-client, (micro)service-oriented system. Spring Security and Spring Security OAuth, in particular, provide a compelling solution. Join the good Dr. Dave Syer for this &lt;a href="https://spring.io/blog/2014/10/01/webinar-security-for-microservices-with-spring-and-oauth2"&gt;upcoming webinar on microservice security using OAuth2&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Matt Stine will be doing a webinar introducing &lt;a href="https://spring.io/blog/2014/10/01/webinar-architecting-for-continuous-delivery-microservices-with-pivotal-cf-and-spring-cloud"&gt;how Pivotal Cloud Foundry and Spring Cloud make for a natural solution to building microservices&lt;/a&gt;. Don't miss this one!&lt;/li&gt;
&lt;li&gt;Atlanta, GA, USA Tuesday Oct 21, Learn about Spring, Microservices, and Cloud Foundry at a &lt;a href="http://www.pivotal.io/platform-as-a-service/cloud-platform-roadshow/atlanta#cities"&gt;one day roadshow event&lt;/a&gt; at Cox communications.&lt;/li&gt;
&lt;li&gt;Munich, Germany, GA, Thursday Oct 23, Learn about Spring, Microservices, and Cloud Foundry at a &lt;a href="http://www.pivotal.io/platform-as-a-service/cloud-platform-roadshow/munich"&gt;one day roadshow event&lt;/a&gt; at EMC's office in Ismaning, Germany. &lt;/li&gt;
&lt;li&gt;I hope you'll join the Vaadin team and I on October 23rd for a &lt;a href="http://spring.io/blog/2014/10/01/webinar-building-bootful-uis-with-spring-boot-and-vaadin"&gt;look how to build Spring Boot-powered Vaadin applications&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;Java et Moi&lt;/em&gt; blog has a nice (French language) post &lt;a href="http://javaetmoi.com/2014/10/annotation-sessionattributes-modelattribute-spring-mvc/"&gt;on  using Spring MVC's &lt;code&gt;@SessionAttribute&lt;/code&gt; annotation&lt;/a&gt;&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;I &lt;em&gt;really&lt;/em&gt; enjoyed this &lt;a href="http://altfatterz.blogspot.com/2014/10/software-configuration-with-spring-boot.html"&gt;very thorough look at contributing configuration property values&lt;/a&gt; to a Spring Boot application (as &lt;code&gt;--D&lt;/code&gt; arguments, environment variables, values in a property file, and values inside of JNDI)&lt;/li&gt;
&lt;li&gt;Sudhir Dharmadhikari   has done a &lt;em&gt;very&lt;/em&gt; &lt;a href="http://iwaow.blogspot.com/2014/10/jhipster-super-baby-in-springroos-pouch.html"&gt;nice job introducing the &lt;code&gt;yeoman&lt;/code&gt; code-generator based JHipster&lt;/a&gt;, which builds on top of &lt;a href="http://spring.io/projects/spring-boot"&gt;Spring Boot&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Our pal Miroslav Kopecky is back, this &lt;a href="http://java.dzone.com/articles/scala-4-spring-mvc-without-0"&gt;time with a nice post on using Spring MVC (in Spring 4) using Java configuration&lt;/a&gt; (through Scala!)&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://antirez.com/news/79"&gt;Redis Cluster is no longer vaporware&lt;/a&gt;! Check out the details.&lt;/li&gt;
&lt;li&gt; Biju Kunjummen has put together &lt;a href="http://java.dzone.com/articles/spring-configuration-and"&gt;a very nice post on  the two styles of Java configuration&lt;/a&gt;: one where you declare dependencies as parameters to the &lt;code&gt;@Bean&lt;/code&gt;-annotated bean definition method, and one where you simply reference the other bean by calling a method.&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;Check out this post on &lt;a href="http://architects.dzone.com/articles/using-log4j2-slf4j-spring-4"&gt;avoiding dependency conflicts between Log4j2 and SLF4J&lt;/a&gt; in a Spring application.&lt;/li&gt;
&lt;li&gt;Check out this post by Daniel Murygin which includes  a detailed walk-through &lt;a href="http://murygin.wordpress.com/2014/10/13/rest-web-service-file-uploads-spring-boot/"&gt;on building a fairly non-trivial REST service (that even handles file-uploads!) and client application using Spring Boot&lt;/a&gt;?&lt;br&gt;
&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Spring Tool Suite and Groovy/Grails Tool Suite 3.6.2 released</title>
    <link rel="alternate" href="https://spring.io/blog/2014/10/13/spring-tool-suite-and-groovy-grails-tool-suite-3-6-2-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Martin Lippert</name>
    </author>
    <id>tag:spring.io,2014-10-13:1788</id>
    <updated>2014-10-13T14:20:11Z</updated>
    <content type="html">&lt;p&gt;Dear Spring Community,&lt;/p&gt;

&lt;p&gt;I am happy to announce the new release of our Eclipse-based tooling today:
The Spring Tool Suite (STS) 3.6.2 and the Groovy/Grails Tool Suite (GGTS) 3.6.2.&lt;/p&gt;

&lt;p&gt;This is a maintenance release that updates STS/GGTS to the just released Eclipse Luna SR1 release. This includes a number of fixes across the various projects that are included in the STS distribution, together with fixes for the Java8 compiler and tooling in Eclipse.&lt;/p&gt;

&lt;p&gt;To download the distributions, please go visit:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spring Tool Suite: &lt;a href="https://spring.io/tools/sts/all"&gt;https://spring.io/tools/sts/all&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Groovy/Grails Tool Suite: &lt;a href="https://spring.io/tools/ggts/all"&gt;https://spring.io/tools/ggts/all&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Detailed new and noteworthy notes can be found here: &lt;a href="http://docs.spring.io/sts/nan/v362/NewAndNoteworthy.html"&gt;STS/GGTS 3.6.2 New &amp;amp; Noteworthy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;NOTE:
Both tool suites ship on top of the latest Eclipse Luna 4.4 SR1 release as 64bit and 32bit based zip files only. There will be no native installers for STS/GGTS anymore.&lt;/p&gt;

&lt;p&gt;Since the 3.6.0 release we shifted towards a slightly changed release schedule, shipping minor releases more frequently. Therefore 3.6.3 is scheduled to ship in December, followed by 3.6.4 in early March 2015, shortly after the Eclipse Luna SR2 release.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Boot 1.2.0.M2 Available Now</title>
    <link rel="alternate" href="https://spring.io/blog/2014/10/11/spring-boot-1-2-0-m2-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>Phil Webb</name>
    </author>
    <id>tag:spring.io,2014-10-11:1786</id>
    <updated>2014-10-11T03:55:53Z</updated>
    <content type="html">&lt;p&gt;I am pleased to announce that Spring Boot 1.2.0.M2 is available now in the &lt;a href="http://repo.springsource.org/milestone"&gt;Spring milestone repository&lt;/a&gt;. This release adds a number of  improvements and new features over &lt;a href="https://spring.io/blog/2014/09/08/spring-boot-1-2-0-m1-available-now"&gt;M1&lt;/a&gt;. Highlights include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Full configuration of Jackson &lt;code&gt;ObjectMapper&lt;/code&gt; features from your &lt;code&gt;application.properties&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;Auto-configuration for Jersey.&lt;/li&gt;
&lt;li&gt;Support for Log4j2.&lt;/li&gt;
&lt;li&gt;Support for commons-dbcp2.&lt;/li&gt;
&lt;li&gt;A new "disk usage" health indicator.&lt;/li&gt;
&lt;li&gt;Improved RabbitMQ auto-configuration.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a complete list of changes, and for upgrade instructions, see the &lt;a href="http://github.com/spring-projects/spring-boot/wiki/Spring-Boot-1.2-Release-Notes"&gt;Spring Boot 1.2 Release Notes&lt;/a&gt; on the WIKI. The &lt;a href="http://docs.spring.io/spring-boot/docs/1.2.0.M2/reference/htmlsingle/"&gt;reference documentation&lt;/a&gt; also continues to be updated to cover the new features.&lt;/p&gt;

&lt;p&gt;Thanks again to everyone that has contributed to the release! Please give it a go and report any problems using &lt;a href="http://github.com/spring-projects/spring-boot/issues"&gt;the project Issue tracker&lt;/a&gt; page.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Boot 1.1.8 released</title>
    <link rel="alternate" href="https://spring.io/blog/2014/10/11/spring-boot-1-1-8-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Phil Webb</name>
    </author>
    <id>tag:spring.io,2014-10-11:1785</id>
    <updated>2014-10-11T00:37:52Z</updated>
    <content type="html">&lt;p&gt;Spring Boot 1.1.8 has been released and is available now from &lt;a href="http://repo.spring.io/release"&gt;repo.spring.io&lt;/a&gt; and &lt;a href="http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.springframework.boot%22"&gt;Maven Central&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;This maintenance release includes a &lt;a href="https://github.com/spring-projects/spring-boot/commit/3135c7f8aeb30b71eccc02bb0bb3817132c41060"&gt;security patch&lt;/a&gt; to the "white label error" page which prevents potential cross-site scripting attacks; as such it is a recommended upgrade for all Spring Boot users. For a complete list of changes please refer to the &lt;a href="https://github.com/spring-projects/spring-boot/issues?q=milestone%3A1.1.8"&gt;issue tracker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://projects.spring.io/spring-boot/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-boot/docs/1.1.8.RELEASE/reference/htmlsingle"&gt;Documentation&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Pivotal at Silicon Valley Code Camp 2014</title>
    <link rel="alternate" href="https://spring.io/blog/2014/10/10/pivotal-at-silicon-valley-code-camp-2014" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2014-10-10:1784</id>
    <updated>2014-10-10T10:24:00Z</updated>
    <content type="html">&lt;p&gt;Are  you heading to Silicon Valley Code Camp 2014?¬†¬† If you  are, we invite all of the Java community members to stop by the Pivotal Booth and talk to Pivotal engineers about the latest innovations  in Java SE, in Spring, Groovy, Grails, Redis, RabbitMQ, Tomcat, Cloud Foundry  and Hadoop. The exhibit space is open Saturday 8:00am ‚Äì 5:00pm, and  Saturday from 8:30am to 3:30pm, so there should be plenty of time to get your  questions answered.¬† See below for  details about our sessions and awesome giveaways - come  find us!¬†&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SATURDAY - OCTOBER 11, 2014¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬† &lt;/strong&gt;&lt;br&gt;
9:45 AM &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Josh Long ‚Äî Spring  advocate at Pivotal&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.siliconvalley-codecamp.com/Session/2014/building-bootiful-applications-with-spring-boot" target="_blank"&gt;Building "Bootiful Applications with Spring Boot &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Room: 8401&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;11:45 AM &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;John Hann,  ‚Äî Pivotal&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.siliconvalley-codecamp.com/Session/2014/introducing-ravejs-zero-config-javascript-applications" target="_blank"&gt;Introducing Rave.js: Zero-config JavaScript Applications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Room: 8401&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1:45 PM &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ilayaperumal Gopinathan   ‚Äî Pivotal&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.siliconvalley-codecamp.com/Session/2014/simplifying-big-data-development-using-spring-xd" target="_blank"&gt;Simplifying Big Data development at Spring XD&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt; Room: 8403&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;SUNDAY - OCTOBER 12, 2014&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;9:15 AM &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cornelia Davis ‚Äî  Platform Engineer at Pivotal&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.siliconvalley-codecamp.com/Session/2014/the-self-healing-elastic-runtime-that-is-cloud-foundry"&gt;The Self-healing, Elastic Runtime that is Cloud Foundry&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Room: Room: 4302&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;10:45 AM&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cornelia Davis ‚Äî  Platform Engineer at Pivotal&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.siliconvalley-codecamp.com/Session/2014/running-your-spring-apps-in-the-cloud" target="_blank"&gt;Running Your Spring  Apps in the Cloud&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Room: 4302&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Visit us at the Pivotal Code Camp booth for technical expert conversations on Cloud Foundry, Spring, Groovy, Grails, Redis, RabbitMQ, Tomcat,   Hadoop and much more. &lt;/p&gt;

&lt;p&gt;Also, don't miss the &lt;a href="http://run.pivotal.io"&gt;Pivotal Web Services&lt;/a&gt; Hoodie Push!¬† &lt;a href="https://spring.io/guides/gs/rest-service/"&gt;Build a REST service with Spring Boot&lt;/a&gt;, push it live to  run.pivotal.io and get a hoodie!¬† You can  do it ahead of time, and show it running to us, or use our laptops at the  booth. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/pieterhumphrey/springio_website_images/master/hoodie.PNG" target="_blank"&gt;&lt;img border="0" width="215" height="254" src="https://raw.githubusercontent.com/pieterhumphrey/springio_website_images/master/hoodie.PNG" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;Save the date for SpringOne2GX 2015!¬† We hope you will mark your calendar and join  us again! SpringOne2GX 2015 will be held September 14 - 17, 2015 at the  Marriott Marquis in Washington DC.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring  - October 7th, 2014</title>
    <link rel="alternate" href="https://spring.io/blog/2014/10/08/this-week-in-spring-october-7th-2014" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2014-10-08:1783</id>
    <updated>2014-10-08T03:49:00Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;!  This week, I've been at the Couchbase Connect conference talking to developers about Spring Data Couchbase (and Spring Boot, Spring XD, Spring Session, and more..). Fun show, fun crowd! Next week, I'll be at &lt;a href="http://jaxlondon.com/2014/speakers/josh-long"&gt;JAX London&lt;/a&gt; and &lt;a href="http://uk.geekout.ee/speakers/josh-long/"&gt;Geekout UK&lt;/a&gt;, so be sure to say hi if you're around. &lt;/p&gt;

&lt;p&gt;Now, with that, let's get on to the roundup..&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The good Dr. Pollack just announced &lt;a href="http://spring.io/blog/2014/10/02/spring-xd-1-0-1-released"&gt;the 1.0.1 release of Spring XD&lt;/a&gt;, the easiest way to build data-integration and ingestion solutions. It may be only a 1.0.1 release, but make no mistake: there are some very cool features in this release, including improved administrative and administrative UI features. &lt;/li&gt;
&lt;li&gt;Federated security is an important part of any distributed, multi-client, (micro)service-oriented system. Spring Security and Spring Security OAuth, in particular, provide a compelling solution. Join the good Dr. Dave Syer for this &lt;a href="https://spring.io/blog/2014/10/01/webinar-security-for-microservices-with-spring-and-oauth2"&gt;upcoming webinar on microservice security using OAuth2&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Matt Stine will be doing a webinar introducing &lt;a href="https://spring.io/blog/2014/10/01/webinar-architecting-for-continuous-delivery-microservices-with-pivotal-cf-and-spring-cloud"&gt;how Pivotal Cloud Foundry and Spring Cloud make for a natural solution to building microservices&lt;/a&gt;. Don't miss this one!&lt;/li&gt;
&lt;li&gt; Spring and JavaScript ninja  Brian Cavalier has written a &lt;em&gt;very&lt;/em&gt;  interesting post on some of &lt;a href="http://github.com/spring-projects/spring-sync/"&gt;the work&lt;/a&gt; we're doing towards enabling &lt;a href="http://spring.io/blog/2014/10/08/streaming-json-patch-from-spring-to-a-react-ui"&gt;easier differential sync between JavaScript clients and services&lt;/a&gt;. This post not only introduces all these exciting new stuff, but also builds on RaveJS, the Spring Boot-inspired approach to JavaScript.&lt;/li&gt;
&lt;li&gt;I hope you'll join the Vaadin team and I on October 23rd for a &lt;a href="http://spring.io/blog/2014/10/01/webinar-building-bootful-uis-with-spring-boot-and-vaadin"&gt;look how to build Spring Boot-powered Vaadin applications&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Justin Lee Grant has put together &lt;a href="http://www.justinleegrant.com/?p=489"&gt;a good introductory look at Spring Boot&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Spring lead Juergen Hoeller just &lt;a href="http://spring.io/blog/2014/10/01/spring-framework-4-1-1-released"&gt;announced the 4.1.1  release of Spring framework&lt;/a&gt;. This release includes improved &lt;code&gt;Optional&lt;/code&gt; handling, a Jackson &lt;code&gt;ObjectMapper&lt;/code&gt; builder, some requested JDBC improvements, and much more. &lt;/li&gt;
&lt;li&gt;The good Dr. Syer just announced &lt;a href="http://spring.io/blog/2014/10/07/spring-cloud-1-0-0-m1-available-now"&gt;the first milestone release of the Spring Cloud project&lt;/a&gt;. Spring Cloud provides primatives for building microservice and PaaS-centric applications. It builds on top of the Netflix OSS stack and Spring Boot.&lt;/li&gt;
&lt;li&gt;Karthik Abram put together &lt;a href="http://www.eclecticlogic.com/2014/09/01/classpath-scanning/"&gt;a nice post on a hidden gem in Spring: the &lt;code&gt;ClassPathScanningCandidateComponentProvider&lt;/code&gt;&lt;/a&gt; class, which makes it easy to discover beans of a certain type. &lt;/li&gt;
&lt;li&gt;Nicolas Lejeune has written up a fascinating look at how he managed &lt;a href="http://labs.bsb.com/2014/09/turn-a-legacy-app-into-a-cf-service/"&gt;to convert a legacy application (it uses EJB3) and move it to a Cloud Foundry environment&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Our pal Toshiaki Maki put together &lt;a href="http://github.com/making/spring-boot-blank"&gt;his ideal Spring Boot Maven archetype&lt;/a&gt;, and &lt;a href="http://twitter.com/making/status/519626091934134272"&gt;shared it&lt;/a&gt;!&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;Are you a Groovy fan? (who isn't??) Check out Groovy project lead Guillaume LaForge's weekly roundup, &lt;a href="http://t.co/AiDLC6novd"&gt;&lt;em&gt;This Week in Groovy&lt;/em&gt;&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;Do you want &lt;a href="http://mikusa.blogspot.com/2014/08/debugging-java-applications-on.html"&gt;to debug applications deployed on Cloud Foundry&lt;/a&gt;? Daniel Mikusa put together a very nice post explaining one approach. &lt;/li&gt;
&lt;/ol&gt;</content>
  </entry>
  <entry>
    <title>Streaming JSON Patch from Spring to a React UI</title>
    <link rel="alternate" href="https://spring.io/blog/2014/10/08/streaming-json-patch-from-spring-to-a-react-ui" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Brian Cavalier</name>
    </author>
    <id>tag:spring.io,2014-10-07:1782</id>
    <updated>2014-10-08T01:47:03Z</updated>
    <content type="html">&lt;p&gt;We're exploring ways to help developers create rich, modern front-ends that integrate easily with Spring back-ends.  If you attended SpringOne this year, you've already seen some of the things we've been working on:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://speakerdeck.com/gregturn/springone2gx-2014-spring-data-rest-data-meets-hypermedia"&gt;Hypermedia support in Spring Data REST&lt;/a&gt; presented by Greg Turnquist, Oliver Gierke, and Roy Clarkson&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.slideshare.net/unscriptable/rave-js-springone-2gx-2014"&gt;RaveJS: Spring Boot concepts for JavaScript applications&lt;/a&gt; by John Hann&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.slideshare.net/briancavalier/differential-sync-and-json-patch-s2-gx-2014"&gt;Differential Synchronization and JSON Patch&lt;/a&gt; by Craig Walls and me&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;In short, We want to make it easy to communicate efficiently between a Spring back-end and a client and to easily integrate the best and most popular client-side technologies.&lt;/p&gt;

&lt;h2&gt;
&lt;a name="user-content-react--streaming-updates" class="anchor" href="#react--streaming-updates" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;React + streaming updates&lt;/h2&gt;

&lt;p&gt;JSON Patch is a format for sending incremental changes to structured data.  I thought it would be interesting to try streaming updates in JSON Patch format via STOMP all the way out to a web UI.&lt;/p&gt;

&lt;p&gt;Craig Walls had already built a simple &lt;a href="https://github.com/habuma/scores"&gt;football scores proof of concept&lt;/a&gt;, using the new &lt;a href="https://github.com/spring-projects/spring-sync/"&gt;Spring Sync&lt;/a&gt; project to push score updates to a browser using JSON Patch over STOMP.  I was able to take his POC, drop in RaveJS, add client-side reactive streams, and integrate the updates into a &lt;a href="http://facebook.github.io/react/"&gt;React&lt;/a&gt; UI component.&lt;/p&gt;

&lt;p&gt;You can find the &lt;a href="https://github.com/briancavalier/scores"&gt;complete code on github in my rave-most-react branch&lt;/a&gt;.  The server is unchanged from Craig's original version.  The &lt;a href="https://github.com/briancavalier/scores/tree/rave-most-react/src/main/resources/public"&gt;web client&lt;/a&gt; is where the action is.  Have a look at the &lt;a href="https://github.com/briancavalier/scores/blob/rave-most-react/src/main/resources/public/main.js"&gt;main.js to get an overall sense of the app&lt;/a&gt; before we dive into some specifics.&lt;/p&gt;

&lt;h2&gt;
&lt;a name="user-content-starting-out" class="anchor" href="#starting-out" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Starting out&lt;/h2&gt;

&lt;p&gt;I used &lt;a href="https://github.com/RaveJS/rave"&gt;RaveJS&lt;/a&gt; and npm to manage my client side dependencies, so my startup was simple:&lt;/p&gt;

&lt;div class="highlight highlight-sh"&gt;&lt;pre&gt;&amp;gt; &lt;span class="nb"&gt;cd &lt;/span&gt;src/main/resources/public

&amp;gt; npm init

&amp;lt;answer a few questions&amp;gt;

&amp;gt; npm install --save rave most jiff react rave-load-jsx rave-node-process stompjs
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then I just needed a single script tag in the existing HTML, and I was off to coding!&lt;/p&gt;

&lt;div class="highlight highlight-html"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"node_modules/rave/rave.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;a name="user-content-introducing-mostjs" class="anchor" href="#introducing-mostjs" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Introducing most.js&lt;/h2&gt;

&lt;p&gt;Thanks to Craig, I already had a stream of updates (in JSON Patch format) flowing to the client over STOMP.  I decided that the nicest way to work with the stream of patches would be to (surprise!) &lt;em&gt;actually use a stream&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/cujojs/most"&gt;Most.js&lt;/a&gt; is cujoJS's new JavaScript reactive streams package.  It provides a small, but powerful set of APIs for creating, transforming, and consuming event streams.  I used it to wrap up the stompjs API.&lt;/p&gt;

&lt;p&gt;It turns out that there were two STOMP subscriptions: one that carried an initial, complete copy of all the score data, and another that carried all the subsequent changes.  I was able to wrap both subscriptions up into a single reactive stream representing "the latest set of scores" by using &lt;a href="https://github.com/cujojs/jiff"&gt;jiff.js&lt;/a&gt; to apply the JSON Patches as they arrived.&lt;/p&gt;

&lt;p&gt;This bit of code creates a stream from a STOMP subscription to the initial data, takes the first event (a complete snapshot of all scores), and combines it with a second stream containing only JSON Patch updates to produce a view of the scores that changes over time.&lt;/p&gt;

&lt;div class="highlight highlight-js"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getScoresStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initDestination&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateDestination&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Create a stream containing one full copy of the data, and&lt;/span&gt;
    &lt;span class="c1"&gt;// flatMap that to a stream containing the time-varying&lt;/span&gt;
    &lt;span class="c1"&gt;// current set of scores, by accumulating each patch&lt;/span&gt;
    &lt;span class="c1"&gt;// and emitting the updated scores data.&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;getInitialDataStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initDestination&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flatMap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;getUpdatesStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updateDestination&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getInitialDataStream&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initDestination&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Await a copy of the data from the STOMP subscription&lt;/span&gt;
    &lt;span class="c1"&gt;// that is sending the full scores data, then unsubscribe.&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;streamFromStompJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initDestination&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getUpdatesStream&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updateDestination&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Incrementally accumulate patches from the STOMP subscription&lt;/span&gt;
    &lt;span class="c1"&gt;// that is carrying JSON Patches onto the scores data to produce&lt;/span&gt;
    &lt;span class="c1"&gt;// an updated view of the scores.&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;streamFromStompJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updateDestination&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startWith&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updateWithJsonPatch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Most.js also automatically cleans up underlying resources when streams end.  It was easy to arrange to unsubscribe from the first subscription after an initial copy of the full scores data had arrived, leaving only one subscription: the changes.&lt;/p&gt;

&lt;h2&gt;
&lt;a name="user-content-making-the-ui-with-react" class="anchor" href="#making-the-ui-with-react" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;Making the UI with React&lt;/h2&gt;

&lt;p&gt;Now that I had a single most.js stream representing the latest scores, I created a &lt;a href="https://github.com/briancavalier/scores/blob/rave-most-react/src/main/resources/public/Scoreboard.jsx"&gt;React component to display them&lt;/a&gt;.  I installed (see above) the &lt;a href="https://github.com/KidkArolis/rave-load-jsx"&gt;rave-load-jsx extension&lt;/a&gt;, a RaveJS extension created by a community member, which enables direct JSX component loading in RaveJS.  All I had to do was create a Scoreboard.jsx file and start coding a simple React scoreboard component.&lt;/p&gt;

&lt;p&gt;React components have an internal &lt;code&gt;state&lt;/code&gt; object containing the data that will be used to render the component.  All I needed to do was pass the latest scores stream when creating the component, and then have the component observe the stream and update its &lt;code&gt;state&lt;/code&gt;.  The relevant bit of code is only a couple lines:&lt;/p&gt;

&lt;div class="highlight highlight-js"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// this.props.scores is the scores stream provided when the&lt;/span&gt;
&lt;span class="c1"&gt;// Scoreboard component is created&lt;/span&gt;

&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;scores&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;scores&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;React took care of automatically keeping the DOM in sync with the &lt;code&gt;state&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
&lt;a name="user-content-from-bits-to-pixels" class="anchor" href="#from-bits-to-pixels" aria-hidden="true"&gt;&lt;span class="octicon octicon-link"&gt;&lt;/span&gt;&lt;/a&gt;From bits to pixels&lt;/h2&gt;

&lt;p&gt;This is admittedly a toy app.  However, it shows quite a few powerful concepts working together in a very small space, with very little code: small, server-generated deltas flowing over STOMP + WebSocket, to a reactive stream on the client being observed by a React component.  Changes are flowing from a Spring back-end through to the UI--bits to pixels, as it were.&lt;/p&gt;

&lt;p&gt;I hope this tiny app also provides a glimpse at the direction we're headed.  We want to provide tools and client-side packages that help developers build rich, modern client applications that integrate with leading client-side technologies and Spring back-ends.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud 1.0.0.M1 Available Now</title>
    <link rel="alternate" href="https://spring.io/blog/2014/10/07/spring-cloud-1-0-0-m1-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>Dave Syer</name>
    </author>
    <id>tag:spring.io,2014-10-07:1781</id>
    <updated>2014-10-07T13:25:00Z</updated>
    <content type="html">&lt;p&gt;&lt;a href="http://projects.spring.io/spring-cloud"&gt;Spring Cloud&lt;/a&gt; (the new umbrella project announced in September) has reached a milestone, its first, and fresh jars are available in the &lt;a href="http://repo.spring.io/libs-milestone-local"&gt;repo.spring.io&lt;/a&gt; repository. Spring Cloud is going to follow a "release train" model for releases, a bit like Spring Data, but we haven't got a cool name for this one yet, so it's just 1.0.0.M1. The modules that are part of this release are &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Spring Cloud Config: Centralized external configuration management backed by a git repository. The configuration resources map directly to Spring &lt;code&gt;Environment&lt;/code&gt; but could be used by non-Spring applications if desired.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Spring Cloud Netflix: Integration with various Netflix OSS components (Eureka, Hystrix, Zuul, Archaius, etc.).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Spring Cloud Bus: An event bus for linking services and service instances together with distributed messaging. Useful for propagating state changes across a cluster (e.g. config change events).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Spring Cloud Security: A set of primitives for building secure applications and services with minimum fuss.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Spring Cloud CLI: Spring Boot CLI plugin for creating Spring Cloud component applications quickly in Groovy.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Spring Cloud Starters: Spring Boot-style starter projects to ease dependency management for consumers of Spring Cloud.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;All of the above have the 1.0.0.M1 release tag, so a good starting point to try it out  would be to &lt;a href="http://projects.spring.io/spring-cloud/spring-cloud.html#_installation"&gt;install the CLI&lt;/a&gt; and run Config Server with this code:&lt;/p&gt;

&lt;div class="highlight highlight-groovy"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@EnableConfigServer&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConfigServer&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;then hit &lt;code&gt;http://localhost:8080/foo/default&lt;/code&gt; to see some property sources.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/spring-cloud"&gt;code&lt;/a&gt; is hosted on github, and community contributions are extremely welcome, so get on over there are check it out. There are some neat samples in a separate organization: &lt;a href="https://github.com/spring-cloud-samples"&gt;spring-cloud-samples&lt;/a&gt;, including a "scripts" project that has git submodules and scripts to get a complete demo system up and running as quickly as possible.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring XD 1.0.1 released</title>
    <link rel="alternate" href="https://spring.io/blog/2014/10/02/spring-xd-1-0-1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Mark Pollack</name>
    </author>
    <id>tag:spring.io,2014-10-02:1780</id>
    <updated>2014-10-02T22:49:48Z</updated>
    <content type="html">&lt;p&gt;On behalf of the Spring XD team, I am very pleased to announce the general availability of Spring XD 1.0.1!  &lt;/p&gt;

&lt;p&gt;This release includes &lt;a href="https://jira.spring.io/secure/ReleaseNote.jspa?projectId=11401&amp;amp;version=14685"&gt;bug fixes and enhancements&lt;/a&gt; as well as some new features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/spring-projects/spring-xd/wiki/Application-Configuration#enabling-https"&gt;HTTPS access&lt;/a&gt; and &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Application-Configuration#enabling-authentication"&gt;Authentication&lt;/a&gt; to Admin Server&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/spring-projects/spring-xd/wiki/AdminUI#containers"&gt;Cluster&lt;/a&gt; and &lt;a href="https://github.com/spring-projects/spring-xd/wiki/AdminUI#streams"&gt;Stream&lt;/a&gt; views in UI&lt;/li&gt;
&lt;li&gt;Configure a &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Modules#custom-module-registry"&gt;location for custom modules&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/spring-projects/spring-xd/wiki/Sinks#null-sink"&gt;Null sink&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;You can &lt;a href="http://repo.spring.io/release/org/springframework/xd/spring-xd/1.0.1.RELEASE/spring-xd-1.0.1.RELEASE-dist.zip"&gt;download the zip distribution&lt;/a&gt; or install on OSX &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Getting-Started#osx-homebrew-installation"&gt;using homebrew&lt;/a&gt;.  On RHEL/CentOs you can &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Getting-Started#redhatcentos-installation"&gt;install using yum&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Feedback is very important, so please get in touch with questions and comments via&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://stackoverflow.com/questions/tagged/spring-xd"&gt;StackOverflow&lt;/a&gt; &lt;code&gt;spring-xd&lt;/code&gt; tag&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://jira.spring.io/browse/XD/?selectedTab=com.atlassian.jira.jira-projects-plugin:summary-panel"&gt;Spring JIRA&lt;/a&gt; or &lt;a href="https://github.com/spring-projects/spring-xd/issues"&gt;GitHub Issues&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Spring Framework 4.1.1 released</title>
    <link rel="alternate" href="https://spring.io/blog/2014/10/01/spring-framework-4-1-1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Juergen Hoeller</name>
    </author>
    <id>tag:spring.io,2014-10-01:1779</id>
    <updated>2014-10-01T13:15:00Z</updated>
    <content type="html">&lt;p&gt;Dear Spring community,&lt;/p&gt;

&lt;p&gt;I'm pleased to announce that Spring Framework 4.1.1 is available now. As the &lt;b&gt;first maintenance release in the 4.1 line&lt;/b&gt;, this release contains a wide range of fixes for regressions and other issues reported against 4.1 GA. A big thank you to all the issue reporters out there!&lt;/p&gt;

&lt;p&gt;4.1.1 also comes with a &lt;b&gt;selection of minor enhancements&lt;/b&gt;, for example: consistent handling of Java 8's Optional type, a Jackson ObjectMapper builder class with refined defaults, some requested JDBC refinements, as well as &lt;b&gt;specific performance improvements&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jira.spring.io/issues/?jql=project%20%3D%20SPR%20AND%20fixVersion%20%3D%204.1.1%20ORDER%20BY%20issuetype%20ASC"&gt;-&amp;gt; List of resolved JIRA issues for Spring Framework 4.1.1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We strongly recommend an immediate upgrade to 4.1.1 for all 4.1 GA users. The Spring Framework team is now working towards &lt;b&gt;Spring Framework 4.1.2 at the end of October&lt;/b&gt;, which will be the foundation for the upcoming Spring Boot 1.2 GA release.&lt;/p&gt;

&lt;p&gt;On a related note, along with 4.1.2, we are preparing &lt;b&gt;Spring Framework 4.0.8 as the last 4.0.x maintenance release&lt;/b&gt;. If there is anything you'd like to get fixed in the 4.0.x branch still, now is the time to raise it! Otherwise, please upgrade to 4.1.x for ongoing active maintenance.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;/p&gt;

&lt;p&gt;Juergen&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - September 30, 2014</title>
    <link rel="alternate" href="https://spring.io/blog/2014/10/01/this-week-in-spring-september-30-2014" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2014-10-01:1774</id>
    <updated>2014-10-01T03:20:00Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installment of &lt;em&gt;This Week in Spring!&lt;/em&gt; This week &lt;a href="http://spring.io/blog/2014/09/26/pivotal-at-javaone-2014"&gt;the Spring team is at JavaOne&lt;/a&gt;!   There's been, and will be, &lt;em&gt;lots&lt;/em&gt; to see! We're also hanging out at the booth, talking to as many users as possible. Check out the link I just give listing all the cool Pivotal (and non-Pivotal) talks at JavaOne. (Ahem. Naturally, I personally would &lt;em&gt;love&lt;/em&gt; it if you made  &lt;a href="http://oracleus.activeevents.com/2014/connect/sessionDetail.ww?SESSION_ID=3693&amp;amp;tclass=popup"&gt;my talk - &lt;em&gt;Spring4TW!&lt;/em&gt; - tomorrow morning at 8:30am at Parc 55, Cyril Magnin II/III&lt;/a&gt;!).&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/joshlong/meh/master/javaone2014-boot-twis.jpg" target="_blank"&gt;&lt;img src="https://raw.githubusercontent.com/joshlong/meh/master/javaone2014-boot-twis.jpg" style="max-width:100%;"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In addition to IoT, Big Data, and Microservice demos using &lt;a href="http://projects.spring.io/spring-cloud/"&gt;NetFlixOSS on Spring&lt;/a&gt;, students were doing the coding challenge to build a &lt;a href="https://spring.io/guides/gs/rest-service/"&gt;REST service with Spring Boot&lt;/a&gt; and pushed to &lt;a href="http://run.pivotal.io"&gt;Pivotal Web Services&lt;/a&gt; in &amp;lt; 15 minutes to get the &lt;a href="http://preshavedyak.com/"&gt;preshavedyak hoodie&lt;/a&gt; from American Apparel, and learning about the best  PaaS for Java available on the market today;  Java 8 / Tomcat 8 support was released just days ago, and there is strong support for Spring, Groovy and Grails.&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;I really liked Michael Plod's &lt;a href="http://spring.io/blog/2014/09/26/webinar-replay-why-i-recommend-spring"&gt;&lt;em&gt;Why I Recommend Spring&lt;/em&gt; webinar&lt;/a&gt;, now available online as a replay&lt;/li&gt;
&lt;li&gt;Last week, Activiti BPMN2 engine co-founder Joram Barrez and I gave a talk on &lt;a href="http://spring.io/blog/2014/09/26/webinar-replay-process-driven-spring-applications-with-activiti"&gt;how to build process (read: workflow) centric Spring applications&lt;/a&gt;, also now available online. &lt;/li&gt;
&lt;li&gt;Tuesday, Oct 21st, 2014 join &lt;a href="https://twitter.com/mstine"&gt;Matt Stine&lt;/a&gt; for microservice architecture series #2:  &lt;a href="http://spring.io/blog/2014/10/01/webinar-architecting-for-continuous-delivery-microservices-with-pivotal-cf-and-spring-cloud"&gt;Architecting for Continuous Delivery: Microservices with Pivotal CF and Spring Cloud&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Thursday, October 23, 2014, 2014 &lt;a href="http://spring.io/blog/2014/10/01/webinar-building-bootful-uis-with-spring-boot-and-vaadin"&gt;Building ‚ÄúBootful‚Äù UIs with Spring Boot and Vaadin&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Tuesday, November 4, 2014 - microservice architecture series #3 - Join &lt;a href="https://twitter.com/david_syer"&gt;Dr. Dave Syer&lt;/a&gt; on &lt;a href="http://spring.io/blog/2014/10/01/webinar-security-for-microservices-with-spring-and-oauth2"&gt;Security for Microservices with Spring and OAuth2&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Missed microservice architecture #1? Catch the replay of &lt;a href="http://spring.io/blog/2014/09/17/webinar-replay-building-bootiful-microservices-with-spring-boot"&gt;Building "Bootiful" Microservices with Spring Boot&lt;/a&gt; on the Spring Developer Channel&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://spring.io/blog/2014/09/26/spring-boot-1-1-7-released"&gt;Spring Boot 1.1.7 is now available&lt;/a&gt;! &lt;/li&gt;
&lt;li&gt;
&lt;a href="http://raymondhlee.wordpress.com/2014/09/20/setup-spring-security-with-active-directory-ldap-in-spring-boot-web-application/"&gt;Setup Spring Security with Active Directory LDAP in Spring Boot Web Application&lt;/a&gt;  (I &lt;em&gt;just&lt;/em&gt; got asked about this at the Spring BOF yesterday!)&lt;/li&gt;
&lt;li&gt;There's been an interesting debate on microservices recently. &lt;a href="http://blog.cleancoder.com/uncle-bob/2014/09/19/MicroServicesAndJars.html"&gt;"Uncle" Bob Martin has written up a post claiming that &lt;code&gt;.jar&lt;/code&gt;s and Ruby &lt;code&gt;gem&lt;/code&gt;s give you the same benefit of microservices&lt;/a&gt;. There's a &lt;a href="http://www.giorgiosironi.com/2014/09/microservices-are-not-jars.html"&gt;great rebuttal (which I happen to agree with..) by Giorgio Sironi on his blog&lt;/a&gt;. There's even a nice wrapup of &lt;a href="http://www.infoq.com/news/2014/09/microservices-shared-libraries?utm_source=infoq&amp;amp;utm_medium=popular_links_homepage"&gt;the whole discussion on InfoQ&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I really dig &lt;a href="http://blog.pivotal.io/cloud-foundry-pivotal/case-studies-2/platform-wind-tunnel-part-i-heroku"&gt;Matt Stine's &lt;em&gt;wind tunnel&lt;/em&gt; comparison of PaaSes&lt;/a&gt;. Up first: Heroku. I can't wait to see subsequent posts in the series!&lt;/li&gt;
&lt;li&gt;This post on using Spring Data Redis was published (and included in &lt;em&gt;TWiS&lt;/em&gt;..) last year, &lt;a href="http://www.ibm.com/developerworks/library/os-springredis/index.html"&gt;but it came up again and I still thnk it's a worthy read&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;The eHarmony blog has a nice post on &lt;a href="http://www.eharmony.com/engineering/spring-batch-admin-the-tricky-parts/#.VCtPFildUpg"&gt;how to setup Spring Batch Admin (the tricky parts..)&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;In the &lt;em&gt;you have to see it to beleive it&lt;/em&gt; department, did you know there's a &lt;a href="http://bitbucket.org/sglienke/spring4d"&gt;Spring for Delphi (Spring4D) project&lt;/a&gt;? There are Spring-inspired C++, ColdFusion, JavaScript, .NET, Python, and numerous others. Cool to add this to the list.&lt;/li&gt;
&lt;li&gt;The Intertech blog has &lt;a href="http://www.intertech.com/Blog/spring-integration-tutorial-part-7-service-activators/"&gt;another installment on their &lt;em&gt;epic&lt;/em&gt; Spring Integration tutorial&lt;/a&gt;. This one's on &lt;em&gt;service activators&lt;/em&gt; - basically the Spring Integration escape-hatch so you can call regular Java objects.&lt;/li&gt;
&lt;li&gt;Benjamin Ball has a great &lt;a href="http://java.dzone.com/articles/getting-started-rabbitmq-and"&gt;writeup on using RabbitMQ and Spring&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;Yashwant Chavan  has a nice post on building a simple &lt;a href="http://www.technicalkeeda.com/spring/spring-boot-mvc-example"&gt;Spring Boot (with Spring MVC) example and editing it in Eclipse&lt;/a&gt;. &lt;/li&gt;
&lt;li&gt;Our pals at Codecentric are at it again! They've just released &lt;a href="http://blog.codecentric.de/en/2014/09/spring-boot-admin-first-official-release/"&gt;their first cut of their &lt;em&gt;Spring Boot Admin&lt;/em&gt;&lt;/a&gt;. This looks like something that would fit nicely in the &lt;a href="http://github.com/spring-cloud/"&gt;Spring Cloud&lt;/a&gt; project... &lt;/li&gt;
&lt;li&gt;
&lt;a href="http://prezi.com/ob4vxjmj_h1f/spring-boot/"&gt;This has to be one of the coolest Spring Boot presentations, ever&lt;/a&gt;!  Careful, I don't recommend watching it full-screen if you get motion sickness! :)&lt;/li&gt;
&lt;li&gt;Are you stuck on Apache CXF but still want first-class security? This post &lt;a href="http://java.dzone.com/articles/embedded-jetty-and-apache-cxf"&gt;looks at how to plugin Spring Security on top of CXF in minutes&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Biju Kunjummen did a nice job &lt;a href="http://java.dzone.com/articles/spring-1"&gt;clarifying the differences between Spring's   &lt;code&gt;WebApplicationInitializer&lt;/code&gt; and &lt;code&gt;ApplicationContextInitializer&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Webinar: Architecting for Continuous Delivery:  Microservices with Pivotal CF and Spring Cloud</title>
    <link rel="alternate" href="https://spring.io/blog/2014/10/01/webinar-architecting-for-continuous-delivery-microservices-with-pivotal-cf-and-spring-cloud" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2014-10-01:1776</id>
    <updated>2014-10-01T02:20:00Z</updated>
    <content type="html">&lt;p&gt;Speaker: Matt Stine, Pivotal &lt;/p&gt;

&lt;p&gt;Join Matt Stine to hear how you can architect systems that are optimized for continuous delivery, allowing you to innovate and deliver value faster and safer. Microservices, Pivotal CF, and Spring Cloud combine to create an operationalized architecture that enables enterprises to continuously deliver value at scale through rapid, iterative development, and to meet the needs of a mobile-first world.&lt;/p&gt;

&lt;p&gt;Tuesday, Oct 21st, 2014 3:00PM BST (London GMT+01:00) &lt;a href="http://connect.pivotal.io/OSS_Webinar_MicroserviceswithPivotalCFandSpringCloud7AM_Register.html"&gt;Register&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tuesday, Oct 21st, 2014 10:00AM PDT (San Francisco GMT-07:00) &lt;a href="http://connect.pivotal.io/OSS_Webinar_MicroserviceswithPivotalCFandSpringCloud10AM_Register.html"&gt;Register&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
</feed>

